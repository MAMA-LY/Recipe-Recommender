/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spoonacular.client.model.SearchRestaurants200ResponseRestaurantsInnerAddress;
import com.spoonacular.client.model.SearchRestaurants200ResponseRestaurantsInnerLocalHours;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for SearchRestaurants200ResponseRestaurantsInner
 */
public class SearchRestaurants200ResponseRestaurantsInnerTest {
    private final SearchRestaurants200ResponseRestaurantsInner model = new SearchRestaurants200ResponseRestaurantsInner();

    /**
     * Model tests for SearchRestaurants200ResponseRestaurantsInner
     */
    @Test
    public void testSearchRestaurants200ResponseRestaurantsInner() {
        // TODO: test SearchRestaurants200ResponseRestaurantsInner
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'phoneNumber'
     */
    @Test
    public void phoneNumberTest() {
        // TODO: test phoneNumber
    }

    /**
     * Test the property 'address'
     */
    @Test
    public void addressTest() {
        // TODO: test address
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'localHours'
     */
    @Test
    public void localHoursTest() {
        // TODO: test localHours
    }

    /**
     * Test the property 'cuisines'
     */
    @Test
    public void cuisinesTest() {
        // TODO: test cuisines
    }

    /**
     * Test the property 'foodPhotos'
     */
    @Test
    public void foodPhotosTest() {
        // TODO: test foodPhotos
    }

    /**
     * Test the property 'logoPhotos'
     */
    @Test
    public void logoPhotosTest() {
        // TODO: test logoPhotos
    }

    /**
     * Test the property 'storePhotos'
     */
    @Test
    public void storePhotosTest() {
        // TODO: test storePhotos
    }

    /**
     * Test the property 'dollarSigns'
     */
    @Test
    public void dollarSignsTest() {
        // TODO: test dollarSigns
    }

    /**
     * Test the property 'pickupEnabled'
     */
    @Test
    public void pickupEnabledTest() {
        // TODO: test pickupEnabled
    }

    /**
     * Test the property 'deliveryEnabled'
     */
    @Test
    public void deliveryEnabledTest() {
        // TODO: test deliveryEnabled
    }

    /**
     * Test the property 'isOpen'
     */
    @Test
    public void isOpenTest() {
        // TODO: test isOpen
    }

    /**
     * Test the property 'offersFirstPartyDelivery'
     */
    @Test
    public void offersFirstPartyDeliveryTest() {
        // TODO: test offersFirstPartyDelivery
    }

    /**
     * Test the property 'offersThirdPartyDelivery'
     */
    @Test
    public void offersThirdPartyDeliveryTest() {
        // TODO: test offersThirdPartyDelivery
    }

    /**
     * Test the property 'miles'
     */
    @Test
    public void milesTest() {
        // TODO: test miles
    }

    /**
     * Test the property 'weightedRatingValue'
     */
    @Test
    public void weightedRatingValueTest() {
        // TODO: test weightedRatingValue
    }

    /**
     * Test the property 'aggregatedRatingCount'
     */
    @Test
    public void aggregatedRatingCountTest() {
        // TODO: test aggregatedRatingCount
    }

}
