/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular;

import com.spoonacular.client.ApiCallback;
import com.spoonacular.client.ApiClient;
import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiResponse;
import com.spoonacular.client.Configuration;
import com.spoonacular.client.Pair;
import com.spoonacular.client.ProgressRequestBody;
import com.spoonacular.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.spoonacular.client.model.AutocompleteIngredientSearch200ResponseInner;
import java.math.BigDecimal;
import com.spoonacular.client.model.ComputeIngredientAmount200Response;
import com.spoonacular.client.model.GetIngredientInformation200Response;
import com.spoonacular.client.model.GetIngredientSubstitutes200Response;
import com.spoonacular.client.model.IngredientSearch200Response;
import com.spoonacular.client.model.MapIngredientsToGroceryProducts200ResponseInner;
import com.spoonacular.client.model.MapIngredientsToGroceryProductsRequest;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class IngredientsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IngredientsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IngredientsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autocompleteIngredientSearch
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search">Autocomplete Ingredient Search Documentation</a>
     */
    public okhttp3.Call autocompleteIngredientSearchCall(String query, Integer number, Boolean metaInformation, String intolerances, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/ingredients/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (metaInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metaInformation", metaInformation));
        }

        if (intolerances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intolerances", intolerances));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteIngredientSearchValidateBeforeCall(String query, Integer number, Boolean metaInformation, String intolerances, String language, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = autocompleteIngredientSearchCall(query, number, metaInformation, intolerances, language, _callback);
        return localVarCall;

    }

    /**
     * Autocomplete Ingredient Search
     * Autocomplete the entry of an ingredient.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return Set&lt;AutocompleteIngredientSearch200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search">Autocomplete Ingredient Search Documentation</a>
     */
    public Set<AutocompleteIngredientSearch200ResponseInner> autocompleteIngredientSearch(String query, Integer number, Boolean metaInformation, String intolerances, String language) throws ApiException {
        ApiResponse<Set<AutocompleteIngredientSearch200ResponseInner>> localVarResp = autocompleteIngredientSearchWithHttpInfo(query, number, metaInformation, intolerances, language);
        return localVarResp.getData();
    }

    /**
     * Autocomplete Ingredient Search
     * Autocomplete the entry of an ingredient.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse&lt;Set&lt;AutocompleteIngredientSearch200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search">Autocomplete Ingredient Search Documentation</a>
     */
    public ApiResponse<Set<AutocompleteIngredientSearch200ResponseInner>> autocompleteIngredientSearchWithHttpInfo(String query, Integer number, Boolean metaInformation, String intolerances, String language) throws ApiException {
        okhttp3.Call localVarCall = autocompleteIngredientSearchValidateBeforeCall(query, number, metaInformation, intolerances, language, null);
        Type localVarReturnType = new TypeToken<Set<AutocompleteIngredientSearch200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete Ingredient Search (asynchronously)
     * Autocomplete the entry of an ingredient.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search">Autocomplete Ingredient Search Documentation</a>
     */
    public okhttp3.Call autocompleteIngredientSearchAsync(String query, Integer number, Boolean metaInformation, String intolerances, String language, final ApiCallback<Set<AutocompleteIngredientSearch200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteIngredientSearchValidateBeforeCall(query, number, metaInformation, intolerances, language, _callback);
        Type localVarReturnType = new TypeToken<Set<AutocompleteIngredientSearch200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for computeIngredientAmount
     * @param id The id of the ingredient you want the amount for. (required)
     * @param nutrient The target nutrient. See a list of supported nutrients. (required)
     * @param target The target number of the given nutrient. (required)
     * @param unit The target unit. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Ingredient-Amount">Compute Ingredient Amount Documentation</a>
     */
    public okhttp3.Call computeIngredientAmountCall(BigDecimal id, String nutrient, BigDecimal target, String unit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/ingredients/{id}/amount"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nutrient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nutrient", nutrient));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computeIngredientAmountValidateBeforeCall(BigDecimal id, String nutrient, BigDecimal target, String unit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling computeIngredientAmount(Async)");
        }
        
        // verify the required parameter 'nutrient' is set
        if (nutrient == null) {
            throw new ApiException("Missing the required parameter 'nutrient' when calling computeIngredientAmount(Async)");
        }
        
        // verify the required parameter 'target' is set
        if (target == null) {
            throw new ApiException("Missing the required parameter 'target' when calling computeIngredientAmount(Async)");
        }
        

        okhttp3.Call localVarCall = computeIngredientAmountCall(id, nutrient, target, unit, _callback);
        return localVarCall;

    }

    /**
     * Compute Ingredient Amount
     * Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
     * @param id The id of the ingredient you want the amount for. (required)
     * @param nutrient The target nutrient. See a list of supported nutrients. (required)
     * @param target The target number of the given nutrient. (required)
     * @param unit The target unit. (optional)
     * @return ComputeIngredientAmount200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Ingredient-Amount">Compute Ingredient Amount Documentation</a>
     */
    public ComputeIngredientAmount200Response computeIngredientAmount(BigDecimal id, String nutrient, BigDecimal target, String unit) throws ApiException {
        ApiResponse<ComputeIngredientAmount200Response> localVarResp = computeIngredientAmountWithHttpInfo(id, nutrient, target, unit);
        return localVarResp.getData();
    }

    /**
     * Compute Ingredient Amount
     * Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
     * @param id The id of the ingredient you want the amount for. (required)
     * @param nutrient The target nutrient. See a list of supported nutrients. (required)
     * @param target The target number of the given nutrient. (required)
     * @param unit The target unit. (optional)
     * @return ApiResponse&lt;ComputeIngredientAmount200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Ingredient-Amount">Compute Ingredient Amount Documentation</a>
     */
    public ApiResponse<ComputeIngredientAmount200Response> computeIngredientAmountWithHttpInfo(BigDecimal id, String nutrient, BigDecimal target, String unit) throws ApiException {
        okhttp3.Call localVarCall = computeIngredientAmountValidateBeforeCall(id, nutrient, target, unit, null);
        Type localVarReturnType = new TypeToken<ComputeIngredientAmount200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute Ingredient Amount (asynchronously)
     * Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
     * @param id The id of the ingredient you want the amount for. (required)
     * @param nutrient The target nutrient. See a list of supported nutrients. (required)
     * @param target The target number of the given nutrient. (required)
     * @param unit The target unit. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Ingredient-Amount">Compute Ingredient Amount Documentation</a>
     */
    public okhttp3.Call computeIngredientAmountAsync(BigDecimal id, String nutrient, BigDecimal target, String unit, final ApiCallback<ComputeIngredientAmount200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = computeIngredientAmountValidateBeforeCall(id, nutrient, target, unit, _callback);
        Type localVarReturnType = new TypeToken<ComputeIngredientAmount200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIngredientInformation
     * @param id The item&#39;s id. (required)
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Information">Get Ingredient Information Documentation</a>
     */
    public okhttp3.Call getIngredientInformationCall(Integer id, BigDecimal amount, String unit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/ingredients/{id}/information"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngredientInformationValidateBeforeCall(Integer id, BigDecimal amount, String unit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIngredientInformation(Async)");
        }
        

        okhttp3.Call localVarCall = getIngredientInformationCall(id, amount, unit, _callback);
        return localVarCall;

    }

    /**
     * Get Ingredient Information
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @param id The item&#39;s id. (required)
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @return GetIngredientInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Information">Get Ingredient Information Documentation</a>
     */
    public GetIngredientInformation200Response getIngredientInformation(Integer id, BigDecimal amount, String unit) throws ApiException {
        ApiResponse<GetIngredientInformation200Response> localVarResp = getIngredientInformationWithHttpInfo(id, amount, unit);
        return localVarResp.getData();
    }

    /**
     * Get Ingredient Information
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @param id The item&#39;s id. (required)
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @return ApiResponse&lt;GetIngredientInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Information">Get Ingredient Information Documentation</a>
     */
    public ApiResponse<GetIngredientInformation200Response> getIngredientInformationWithHttpInfo(Integer id, BigDecimal amount, String unit) throws ApiException {
        okhttp3.Call localVarCall = getIngredientInformationValidateBeforeCall(id, amount, unit, null);
        Type localVarReturnType = new TypeToken<GetIngredientInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ingredient Information (asynchronously)
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @param id The item&#39;s id. (required)
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Information">Get Ingredient Information Documentation</a>
     */
    public okhttp3.Call getIngredientInformationAsync(Integer id, BigDecimal amount, String unit, final ApiCallback<GetIngredientInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIngredientInformationValidateBeforeCall(id, amount, unit, _callback);
        Type localVarReturnType = new TypeToken<GetIngredientInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIngredientSubstitutes
     * @param ingredientName The name of the ingredient you want to replace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes">Get Ingredient Substitutes Documentation</a>
     */
    public okhttp3.Call getIngredientSubstitutesCall(String ingredientName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/ingredients/substitutes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ingredientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingredientName", ingredientName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngredientSubstitutesValidateBeforeCall(String ingredientName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientName' is set
        if (ingredientName == null) {
            throw new ApiException("Missing the required parameter 'ingredientName' when calling getIngredientSubstitutes(Async)");
        }
        

        okhttp3.Call localVarCall = getIngredientSubstitutesCall(ingredientName, _callback);
        return localVarCall;

    }

    /**
     * Get Ingredient Substitutes
     * Search for substitutes for a given ingredient.
     * @param ingredientName The name of the ingredient you want to replace. (required)
     * @return GetIngredientSubstitutes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes">Get Ingredient Substitutes Documentation</a>
     */
    public GetIngredientSubstitutes200Response getIngredientSubstitutes(String ingredientName) throws ApiException {
        ApiResponse<GetIngredientSubstitutes200Response> localVarResp = getIngredientSubstitutesWithHttpInfo(ingredientName);
        return localVarResp.getData();
    }

    /**
     * Get Ingredient Substitutes
     * Search for substitutes for a given ingredient.
     * @param ingredientName The name of the ingredient you want to replace. (required)
     * @return ApiResponse&lt;GetIngredientSubstitutes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes">Get Ingredient Substitutes Documentation</a>
     */
    public ApiResponse<GetIngredientSubstitutes200Response> getIngredientSubstitutesWithHttpInfo(String ingredientName) throws ApiException {
        okhttp3.Call localVarCall = getIngredientSubstitutesValidateBeforeCall(ingredientName, null);
        Type localVarReturnType = new TypeToken<GetIngredientSubstitutes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ingredient Substitutes (asynchronously)
     * Search for substitutes for a given ingredient.
     * @param ingredientName The name of the ingredient you want to replace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes">Get Ingredient Substitutes Documentation</a>
     */
    public okhttp3.Call getIngredientSubstitutesAsync(String ingredientName, final ApiCallback<GetIngredientSubstitutes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIngredientSubstitutesValidateBeforeCall(ingredientName, _callback);
        Type localVarReturnType = new TypeToken<GetIngredientSubstitutes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIngredientSubstitutesByID
     * @param id The item&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID">Get Ingredient Substitutes by ID Documentation</a>
     */
    public okhttp3.Call getIngredientSubstitutesByIDCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/ingredients/{id}/substitutes"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIngredientSubstitutesByIDValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIngredientSubstitutesByID(Async)");
        }
        

        okhttp3.Call localVarCall = getIngredientSubstitutesByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Ingredient Substitutes by ID
     * Search for substitutes for a given ingredient.
     * @param id The item&#39;s id. (required)
     * @return GetIngredientSubstitutes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID">Get Ingredient Substitutes by ID Documentation</a>
     */
    public GetIngredientSubstitutes200Response getIngredientSubstitutesByID(Integer id) throws ApiException {
        ApiResponse<GetIngredientSubstitutes200Response> localVarResp = getIngredientSubstitutesByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Ingredient Substitutes by ID
     * Search for substitutes for a given ingredient.
     * @param id The item&#39;s id. (required)
     * @return ApiResponse&lt;GetIngredientSubstitutes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID">Get Ingredient Substitutes by ID Documentation</a>
     */
    public ApiResponse<GetIngredientSubstitutes200Response> getIngredientSubstitutesByIDWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getIngredientSubstitutesByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetIngredientSubstitutes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Ingredient Substitutes by ID (asynchronously)
     * Search for substitutes for a given ingredient.
     * @param id The item&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID">Get Ingredient Substitutes by ID Documentation</a>
     */
    public okhttp3.Call getIngredientSubstitutesByIDAsync(Integer id, final ApiCallback<GetIngredientSubstitutes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIngredientSubstitutesByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetIngredientSubstitutes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ingredientSearch
     * @param query The (natural language) search query. (optional)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredient-Search">Ingredient Search Documentation</a>
     */
    public okhttp3.Call ingredientSearchCall(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, Integer offset, Integer number, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/ingredients/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (addChildren != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addChildren", addChildren));
        }

        if (minProteinPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProteinPercent", minProteinPercent));
        }

        if (maxProteinPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProteinPercent", maxProteinPercent));
        }

        if (minFatPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFatPercent", minFatPercent));
        }

        if (maxFatPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFatPercent", maxFatPercent));
        }

        if (minCarbsPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbsPercent", minCarbsPercent));
        }

        if (maxCarbsPercent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbsPercent", maxCarbsPercent));
        }

        if (metaInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metaInformation", metaInformation));
        }

        if (intolerances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intolerances", intolerances));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingredientSearchValidateBeforeCall(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, Integer offset, Integer number, String language, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = ingredientSearchCall(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, language, _callback);
        return localVarCall;

    }

    /**
     * Ingredient Search
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @param query The (natural language) search query. (optional)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return IngredientSearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredient-Search">Ingredient Search Documentation</a>
     */
    public IngredientSearch200Response ingredientSearch(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, Integer offset, Integer number, String language) throws ApiException {
        ApiResponse<IngredientSearch200Response> localVarResp = ingredientSearchWithHttpInfo(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, language);
        return localVarResp.getData();
    }

    /**
     * Ingredient Search
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @param query The (natural language) search query. (optional)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse&lt;IngredientSearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredient-Search">Ingredient Search Documentation</a>
     */
    public ApiResponse<IngredientSearch200Response> ingredientSearchWithHttpInfo(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, Integer offset, Integer number, String language) throws ApiException {
        okhttp3.Call localVarCall = ingredientSearchValidateBeforeCall(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, language, null);
        Type localVarReturnType = new TypeToken<IngredientSearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ingredient Search (asynchronously)
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @param query The (natural language) search query. (optional)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredient-Search">Ingredient Search Documentation</a>
     */
    public okhttp3.Call ingredientSearchAsync(String query, Boolean addChildren, BigDecimal minProteinPercent, BigDecimal maxProteinPercent, BigDecimal minFatPercent, BigDecimal maxFatPercent, BigDecimal minCarbsPercent, BigDecimal maxCarbsPercent, Boolean metaInformation, String intolerances, String sort, String sortDirection, Integer offset, Integer number, String language, final ApiCallback<IngredientSearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingredientSearchValidateBeforeCall(query, addChildren, minProteinPercent, maxProteinPercent, minFatPercent, maxFatPercent, minCarbsPercent, maxCarbsPercent, metaInformation, intolerances, sort, sortDirection, offset, number, language, _callback);
        Type localVarReturnType = new TypeToken<IngredientSearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ingredientsByIDImage
     * @param id The recipe id. (required)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image">Ingredients by ID Image Documentation</a>
     */
    public okhttp3.Call ingredientsByIDImageCall(BigDecimal id, String measure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/ingredientWidget.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("measure", measure));
        }

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingredientsByIDImageValidateBeforeCall(BigDecimal id, String measure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ingredientsByIDImage(Async)");
        }
        

        okhttp3.Call localVarCall = ingredientsByIDImageCall(id, measure, _callback);
        return localVarCall;

    }

    /**
     * Ingredients by ID Image
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image">Ingredients by ID Image Documentation</a>
     */
    public Object ingredientsByIDImage(BigDecimal id, String measure) throws ApiException {
        ApiResponse<Object> localVarResp = ingredientsByIDImageWithHttpInfo(id, measure);
        return localVarResp.getData();
    }

    /**
     * Ingredients by ID Image
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image">Ingredients by ID Image Documentation</a>
     */
    public ApiResponse<Object> ingredientsByIDImageWithHttpInfo(BigDecimal id, String measure) throws ApiException {
        okhttp3.Call localVarCall = ingredientsByIDImageValidateBeforeCall(id, measure, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ingredients by ID Image (asynchronously)
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image">Ingredients by ID Image Documentation</a>
     */
    public okhttp3.Call ingredientsByIDImageAsync(BigDecimal id, String measure, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingredientsByIDImageValidateBeforeCall(id, measure, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapIngredientsToGroceryProducts
     * @param mapIngredientsToGroceryProductsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products">Map Ingredients to Grocery Products Documentation</a>
     */
    public okhttp3.Call mapIngredientsToGroceryProductsCall(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mapIngredientsToGroceryProductsRequest;

        // create path and map variables
        String localVarPath = "/food/ingredients/map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapIngredientsToGroceryProductsValidateBeforeCall(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mapIngredientsToGroceryProductsRequest' is set
        if (mapIngredientsToGroceryProductsRequest == null) {
            throw new ApiException("Missing the required parameter 'mapIngredientsToGroceryProductsRequest' when calling mapIngredientsToGroceryProducts(Async)");
        }
        

        okhttp3.Call localVarCall = mapIngredientsToGroceryProductsCall(mapIngredientsToGroceryProductsRequest, _callback);
        return localVarCall;

    }

    /**
     * Map Ingredients to Grocery Products
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param mapIngredientsToGroceryProductsRequest  (required)
     * @return Set&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products">Map Ingredients to Grocery Products Documentation</a>
     */
    public Set<MapIngredientsToGroceryProducts200ResponseInner> mapIngredientsToGroceryProducts(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest) throws ApiException {
        ApiResponse<Set<MapIngredientsToGroceryProducts200ResponseInner>> localVarResp = mapIngredientsToGroceryProductsWithHttpInfo(mapIngredientsToGroceryProductsRequest);
        return localVarResp.getData();
    }

    /**
     * Map Ingredients to Grocery Products
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param mapIngredientsToGroceryProductsRequest  (required)
     * @return ApiResponse&lt;Set&lt;MapIngredientsToGroceryProducts200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products">Map Ingredients to Grocery Products Documentation</a>
     */
    public ApiResponse<Set<MapIngredientsToGroceryProducts200ResponseInner>> mapIngredientsToGroceryProductsWithHttpInfo(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest) throws ApiException {
        okhttp3.Call localVarCall = mapIngredientsToGroceryProductsValidateBeforeCall(mapIngredientsToGroceryProductsRequest, null);
        Type localVarReturnType = new TypeToken<Set<MapIngredientsToGroceryProducts200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Map Ingredients to Grocery Products (asynchronously)
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param mapIngredientsToGroceryProductsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products">Map Ingredients to Grocery Products Documentation</a>
     */
    public okhttp3.Call mapIngredientsToGroceryProductsAsync(MapIngredientsToGroceryProductsRequest mapIngredientsToGroceryProductsRequest, final ApiCallback<Set<MapIngredientsToGroceryProducts200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapIngredientsToGroceryProductsValidateBeforeCall(mapIngredientsToGroceryProductsRequest, _callback);
        Type localVarReturnType = new TypeToken<Set<MapIngredientsToGroceryProducts200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeIngredients
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param accept Accept header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-Widget">Ingredients Widget Documentation</a>
     */
    public okhttp3.Call visualizeIngredientsCall(String contentType, String language, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/visualizeIngredients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeIngredientsValidateBeforeCall(String contentType, String language, String accept, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = visualizeIngredientsCall(contentType, language, accept, _callback);
        return localVarCall;

    }

    /**
     * Ingredients Widget
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param accept Accept header. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-Widget">Ingredients Widget Documentation</a>
     */
    public String visualizeIngredients(String contentType, String language, String accept) throws ApiException {
        ApiResponse<String> localVarResp = visualizeIngredientsWithHttpInfo(contentType, language, accept);
        return localVarResp.getData();
    }

    /**
     * Ingredients Widget
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param accept Accept header. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-Widget">Ingredients Widget Documentation</a>
     */
    public ApiResponse<String> visualizeIngredientsWithHttpInfo(String contentType, String language, String accept) throws ApiException {
        okhttp3.Call localVarCall = visualizeIngredientsValidateBeforeCall(contentType, language, accept, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ingredients Widget (asynchronously)
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param accept Accept header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-Widget">Ingredients Widget Documentation</a>
     */
    public okhttp3.Call visualizeIngredientsAsync(String contentType, String language, String accept, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeIngredientsValidateBeforeCall(contentType, language, accept, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
