/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spoonacular.client.model.SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for SearchRecipesByIngredients200ResponseInner
 */
public class SearchRecipesByIngredients200ResponseInnerTest {
    private final SearchRecipesByIngredients200ResponseInner model = new SearchRecipesByIngredients200ResponseInner();

    /**
     * Model tests for SearchRecipesByIngredients200ResponseInner
     */
    @Test
    public void testSearchRecipesByIngredients200ResponseInner() {
        // TODO: test SearchRecipesByIngredients200ResponseInner
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'image'
     */
    @Test
    public void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'imageType'
     */
    @Test
    public void imageTypeTest() {
        // TODO: test imageType
    }

    /**
     * Test the property 'likes'
     */
    @Test
    public void likesTest() {
        // TODO: test likes
    }

    /**
     * Test the property 'missedIngredientCount'
     */
    @Test
    public void missedIngredientCountTest() {
        // TODO: test missedIngredientCount
    }

    /**
     * Test the property 'missedIngredients'
     */
    @Test
    public void missedIngredientsTest() {
        // TODO: test missedIngredients
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'unusedIngredients'
     */
    @Test
    public void unusedIngredientsTest() {
        // TODO: test unusedIngredients
    }

    /**
     * Test the property 'usedIngredientCount'
     */
    @Test
    public void usedIngredientCountTest() {
        // TODO: test usedIngredientCount
    }

    /**
     * Test the property 'usedIngredients'
     */
    @Test
    public void usedIngredientsTest() {
        // TODO: test usedIngredients
    }

}
