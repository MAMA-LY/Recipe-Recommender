/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spoonacular.client.model.GuessNutritionByDishName200ResponseCalories;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.spoonacular.client.JSON;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-03T17:09:45.164+01:00[Europe/Berlin]")
public class GuessNutritionByDishName200Response {
  public static final String SERIALIZED_NAME_CALORIES = "calories";
  @SerializedName(SERIALIZED_NAME_CALORIES)
  private GuessNutritionByDishName200ResponseCalories calories;

  public static final String SERIALIZED_NAME_CARBS = "carbs";
  @SerializedName(SERIALIZED_NAME_CARBS)
  private GuessNutritionByDishName200ResponseCalories carbs;

  public static final String SERIALIZED_NAME_FAT = "fat";
  @SerializedName(SERIALIZED_NAME_FAT)
  private GuessNutritionByDishName200ResponseCalories fat;

  public static final String SERIALIZED_NAME_PROTEIN = "protein";
  @SerializedName(SERIALIZED_NAME_PROTEIN)
  private GuessNutritionByDishName200ResponseCalories protein;

  public static final String SERIALIZED_NAME_RECIPES_USED = "recipesUsed";
  @SerializedName(SERIALIZED_NAME_RECIPES_USED)
  private Integer recipesUsed;

  public GuessNutritionByDishName200Response() { 
  }

  public GuessNutritionByDishName200Response calories(GuessNutritionByDishName200ResponseCalories calories) {
    
    this.calories = calories;
    return this;
  }

   /**
   * Get calories
   * @return calories
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GuessNutritionByDishName200ResponseCalories getCalories() {
    return calories;
  }


  public void setCalories(GuessNutritionByDishName200ResponseCalories calories) {
    this.calories = calories;
  }


  public GuessNutritionByDishName200Response carbs(GuessNutritionByDishName200ResponseCalories carbs) {
    
    this.carbs = carbs;
    return this;
  }

   /**
   * Get carbs
   * @return carbs
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GuessNutritionByDishName200ResponseCalories getCarbs() {
    return carbs;
  }


  public void setCarbs(GuessNutritionByDishName200ResponseCalories carbs) {
    this.carbs = carbs;
  }


  public GuessNutritionByDishName200Response fat(GuessNutritionByDishName200ResponseCalories fat) {
    
    this.fat = fat;
    return this;
  }

   /**
   * Get fat
   * @return fat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GuessNutritionByDishName200ResponseCalories getFat() {
    return fat;
  }


  public void setFat(GuessNutritionByDishName200ResponseCalories fat) {
    this.fat = fat;
  }


  public GuessNutritionByDishName200Response protein(GuessNutritionByDishName200ResponseCalories protein) {
    
    this.protein = protein;
    return this;
  }

   /**
   * Get protein
   * @return protein
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GuessNutritionByDishName200ResponseCalories getProtein() {
    return protein;
  }


  public void setProtein(GuessNutritionByDishName200ResponseCalories protein) {
    this.protein = protein;
  }


  public GuessNutritionByDishName200Response recipesUsed(Integer recipesUsed) {
    
    this.recipesUsed = recipesUsed;
    return this;
  }

   /**
   * Get recipesUsed
   * @return recipesUsed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRecipesUsed() {
    return recipesUsed;
  }


  public void setRecipesUsed(Integer recipesUsed) {
    this.recipesUsed = recipesUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuessNutritionByDishName200Response guessNutritionByDishName200Response = (GuessNutritionByDishName200Response) o;
    return Objects.equals(this.calories, guessNutritionByDishName200Response.calories) &&
        Objects.equals(this.carbs, guessNutritionByDishName200Response.carbs) &&
        Objects.equals(this.fat, guessNutritionByDishName200Response.fat) &&
        Objects.equals(this.protein, guessNutritionByDishName200Response.protein) &&
        Objects.equals(this.recipesUsed, guessNutritionByDishName200Response.recipesUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calories, carbs, fat, protein, recipesUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuessNutritionByDishName200Response {\n");
    sb.append("    calories: ").append(toIndentedString(calories)).append("\n");
    sb.append("    carbs: ").append(toIndentedString(carbs)).append("\n");
    sb.append("    fat: ").append(toIndentedString(fat)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("    recipesUsed: ").append(toIndentedString(recipesUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calories");
    openapiFields.add("carbs");
    openapiFields.add("fat");
    openapiFields.add("protein");
    openapiFields.add("recipesUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("calories");
    openapiRequiredFields.add("carbs");
    openapiRequiredFields.add("fat");
    openapiRequiredFields.add("protein");
    openapiRequiredFields.add("recipesUsed");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GuessNutritionByDishName200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GuessNutritionByDishName200Response.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuessNutritionByDishName200Response is not found in the empty JSON string", GuessNutritionByDishName200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GuessNutritionByDishName200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuessNutritionByDishName200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GuessNutritionByDishName200Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `calories`
      if (jsonObj.getAsJsonObject("calories") != null) {
        GuessNutritionByDishName200ResponseCalories.validateJsonObject(jsonObj.getAsJsonObject("calories"));
      }
      // validate the optional field `carbs`
      if (jsonObj.getAsJsonObject("carbs") != null) {
        GuessNutritionByDishName200ResponseCalories.validateJsonObject(jsonObj.getAsJsonObject("carbs"));
      }
      // validate the optional field `fat`
      if (jsonObj.getAsJsonObject("fat") != null) {
        GuessNutritionByDishName200ResponseCalories.validateJsonObject(jsonObj.getAsJsonObject("fat"));
      }
      // validate the optional field `protein`
      if (jsonObj.getAsJsonObject("protein") != null) {
        GuessNutritionByDishName200ResponseCalories.validateJsonObject(jsonObj.getAsJsonObject("protein"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuessNutritionByDishName200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuessNutritionByDishName200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuessNutritionByDishName200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuessNutritionByDishName200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GuessNutritionByDishName200Response>() {
           @Override
           public void write(JsonWriter out, GuessNutritionByDishName200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuessNutritionByDishName200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GuessNutritionByDishName200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GuessNutritionByDishName200Response
  * @throws IOException if the JSON string is invalid with respect to GuessNutritionByDishName200Response
  */
  public static GuessNutritionByDishName200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuessNutritionByDishName200Response.class);
  }

 /**
  * Convert an instance of GuessNutritionByDishName200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

