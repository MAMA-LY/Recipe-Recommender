/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spoonacular.client.model.SearchSiteContent200ResponseArticlesInner;
import com.spoonacular.client.model.SearchSiteContent200ResponseGroceryProductsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.spoonacular.client.JSON;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-03T17:09:45.164+01:00[Europe/Berlin]")
public class SearchSiteContent200Response {
  public static final String SERIALIZED_NAME_ARTICLES = "Articles";
  @SerializedName(SERIALIZED_NAME_ARTICLES)
  private Set<SearchSiteContent200ResponseArticlesInner> articles = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_GROCERY_PRODUCTS = "Grocery Products";
  @SerializedName(SERIALIZED_NAME_GROCERY_PRODUCTS)
  private Set<SearchSiteContent200ResponseGroceryProductsInner> groceryProducts = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_MENU_ITEMS = "Menu Items";
  @SerializedName(SERIALIZED_NAME_MENU_ITEMS)
  private Set<SearchSiteContent200ResponseGroceryProductsInner> menuItems = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_RECIPES = "Recipes";
  @SerializedName(SERIALIZED_NAME_RECIPES)
  private Set<SearchSiteContent200ResponseGroceryProductsInner> recipes = new LinkedHashSet<>();

  public SearchSiteContent200Response() { 
  }

  public SearchSiteContent200Response articles(Set<SearchSiteContent200ResponseArticlesInner> articles) {
    
    this.articles = articles;
    return this;
  }

  public SearchSiteContent200Response addArticlesItem(SearchSiteContent200ResponseArticlesInner articlesItem) {
    this.articles.add(articlesItem);
    return this;
  }

   /**
   * Get articles
   * @return articles
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<SearchSiteContent200ResponseArticlesInner> getArticles() {
    return articles;
  }


  public void setArticles(Set<SearchSiteContent200ResponseArticlesInner> articles) {
    this.articles = articles;
  }


  public SearchSiteContent200Response groceryProducts(Set<SearchSiteContent200ResponseGroceryProductsInner> groceryProducts) {
    
    this.groceryProducts = groceryProducts;
    return this;
  }

  public SearchSiteContent200Response addGroceryProductsItem(SearchSiteContent200ResponseGroceryProductsInner groceryProductsItem) {
    this.groceryProducts.add(groceryProductsItem);
    return this;
  }

   /**
   * Get groceryProducts
   * @return groceryProducts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<SearchSiteContent200ResponseGroceryProductsInner> getGroceryProducts() {
    return groceryProducts;
  }


  public void setGroceryProducts(Set<SearchSiteContent200ResponseGroceryProductsInner> groceryProducts) {
    this.groceryProducts = groceryProducts;
  }


  public SearchSiteContent200Response menuItems(Set<SearchSiteContent200ResponseGroceryProductsInner> menuItems) {
    
    this.menuItems = menuItems;
    return this;
  }

  public SearchSiteContent200Response addMenuItemsItem(SearchSiteContent200ResponseGroceryProductsInner menuItemsItem) {
    this.menuItems.add(menuItemsItem);
    return this;
  }

   /**
   * Get menuItems
   * @return menuItems
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<SearchSiteContent200ResponseGroceryProductsInner> getMenuItems() {
    return menuItems;
  }


  public void setMenuItems(Set<SearchSiteContent200ResponseGroceryProductsInner> menuItems) {
    this.menuItems = menuItems;
  }


  public SearchSiteContent200Response recipes(Set<SearchSiteContent200ResponseGroceryProductsInner> recipes) {
    
    this.recipes = recipes;
    return this;
  }

  public SearchSiteContent200Response addRecipesItem(SearchSiteContent200ResponseGroceryProductsInner recipesItem) {
    this.recipes.add(recipesItem);
    return this;
  }

   /**
   * Get recipes
   * @return recipes
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Set<SearchSiteContent200ResponseGroceryProductsInner> getRecipes() {
    return recipes;
  }


  public void setRecipes(Set<SearchSiteContent200ResponseGroceryProductsInner> recipes) {
    this.recipes = recipes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchSiteContent200Response searchSiteContent200Response = (SearchSiteContent200Response) o;
    return Objects.equals(this.articles, searchSiteContent200Response.articles) &&
        Objects.equals(this.groceryProducts, searchSiteContent200Response.groceryProducts) &&
        Objects.equals(this.menuItems, searchSiteContent200Response.menuItems) &&
        Objects.equals(this.recipes, searchSiteContent200Response.recipes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(articles, groceryProducts, menuItems, recipes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchSiteContent200Response {\n");
    sb.append("    articles: ").append(toIndentedString(articles)).append("\n");
    sb.append("    groceryProducts: ").append(toIndentedString(groceryProducts)).append("\n");
    sb.append("    menuItems: ").append(toIndentedString(menuItems)).append("\n");
    sb.append("    recipes: ").append(toIndentedString(recipes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Articles");
    openapiFields.add("Grocery Products");
    openapiFields.add("Menu Items");
    openapiFields.add("Recipes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Articles");
    openapiRequiredFields.add("Grocery Products");
    openapiRequiredFields.add("Menu Items");
    openapiRequiredFields.add("Recipes");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SearchSiteContent200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SearchSiteContent200Response.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchSiteContent200Response is not found in the empty JSON string", SearchSiteContent200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SearchSiteContent200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchSiteContent200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchSiteContent200Response.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      JsonArray jsonArrayarticles = jsonObj.getAsJsonArray("Articles");
      if (jsonArrayarticles != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Articles").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Articles` to be an array in the JSON string but got `%s`", jsonObj.get("Articles").toString()));
        }

        // validate the optional field `Articles` (array)
        for (int i = 0; i < jsonArrayarticles.size(); i++) {
          SearchSiteContent200ResponseArticlesInner.validateJsonObject(jsonArrayarticles.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraygroceryProducts = jsonObj.getAsJsonArray("Grocery Products");
      if (jsonArraygroceryProducts != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Grocery Products").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Grocery Products` to be an array in the JSON string but got `%s`", jsonObj.get("Grocery Products").toString()));
        }

        // validate the optional field `Grocery Products` (array)
        for (int i = 0; i < jsonArraygroceryProducts.size(); i++) {
          SearchSiteContent200ResponseGroceryProductsInner.validateJsonObject(jsonArraygroceryProducts.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArraymenuItems = jsonObj.getAsJsonArray("Menu Items");
      if (jsonArraymenuItems != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Menu Items").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Menu Items` to be an array in the JSON string but got `%s`", jsonObj.get("Menu Items").toString()));
        }

        // validate the optional field `Menu Items` (array)
        for (int i = 0; i < jsonArraymenuItems.size(); i++) {
          SearchSiteContent200ResponseGroceryProductsInner.validateJsonObject(jsonArraymenuItems.get(i).getAsJsonObject());
        };
      }
      JsonArray jsonArrayrecipes = jsonObj.getAsJsonArray("Recipes");
      if (jsonArrayrecipes != null) {
        // ensure the json data is an array
        if (!jsonObj.get("Recipes").isJsonArray()) {
          throw new IllegalArgumentException(String.format("Expected the field `Recipes` to be an array in the JSON string but got `%s`", jsonObj.get("Recipes").toString()));
        }

        // validate the optional field `Recipes` (array)
        for (int i = 0; i < jsonArrayrecipes.size(); i++) {
          SearchSiteContent200ResponseGroceryProductsInner.validateJsonObject(jsonArrayrecipes.get(i).getAsJsonObject());
        };
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchSiteContent200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchSiteContent200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchSiteContent200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchSiteContent200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchSiteContent200Response>() {
           @Override
           public void write(JsonWriter out, SearchSiteContent200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchSiteContent200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SearchSiteContent200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SearchSiteContent200Response
  * @throws IOException if the JSON string is invalid with respect to SearchSiteContent200Response
  */
  public static SearchSiteContent200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchSiteContent200Response.class);
  }

 /**
  * Convert an instance of SearchSiteContent200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

