/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular;

import com.spoonacular.client.ApiCallback;
import com.spoonacular.client.ApiClient;
import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiResponse;
import com.spoonacular.client.Configuration;
import com.spoonacular.client.Pair;
import com.spoonacular.client.ProgressRequestBody;
import com.spoonacular.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.spoonacular.client.model.AnalyzeARecipeSearchQuery200Response;
import com.spoonacular.client.model.AnalyzeRecipeInstructions200Response;
import com.spoonacular.client.model.AutocompleteRecipeSearch200ResponseInner;
import java.math.BigDecimal;
import com.spoonacular.client.model.ClassifyCuisine200Response;
import com.spoonacular.client.model.ComputeGlycemicLoad200Response;
import com.spoonacular.client.model.ComputeGlycemicLoadRequest;
import com.spoonacular.client.model.ConvertAmounts200Response;
import com.spoonacular.client.model.CreateRecipeCard200Response;
import com.spoonacular.client.model.GetAnalyzedRecipeInstructions200Response;
import com.spoonacular.client.model.GetRandomRecipes200Response;
import com.spoonacular.client.model.GetRecipeEquipmentByID200Response;
import com.spoonacular.client.model.GetRecipeInformation200Response;
import com.spoonacular.client.model.GetRecipeInformationBulk200ResponseInner;
import com.spoonacular.client.model.GetRecipeIngredientsByID200Response;
import com.spoonacular.client.model.GetRecipeNutritionWidgetByID200Response;
import com.spoonacular.client.model.GetRecipePriceBreakdownByID200Response;
import com.spoonacular.client.model.GetRecipeTasteByID200Response;
import com.spoonacular.client.model.GetSimilarRecipes200ResponseInner;
import com.spoonacular.client.model.GuessNutritionByDishName200Response;
import com.spoonacular.client.model.ParseIngredients200ResponseInner;
import com.spoonacular.client.model.QuickAnswer200Response;
import com.spoonacular.client.model.SearchRecipes200Response;
import com.spoonacular.client.model.SearchRecipesByIngredients200ResponseInner;
import com.spoonacular.client.model.SearchRecipesByNutrients200ResponseInner;
import java.util.Set;
import com.spoonacular.client.model.SummarizeRecipe200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RecipesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecipesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecipesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyzeARecipeSearchQuery
     * @param q The recipe search query. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query">Analyze a Recipe Search Query Documentation</a>
     */
    public okhttp3.Call analyzeARecipeSearchQueryCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/queries/analyze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeARecipeSearchQueryValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling analyzeARecipeSearchQuery(Async)");
        }
        

        okhttp3.Call localVarCall = analyzeARecipeSearchQueryCall(q, _callback);
        return localVarCall;

    }

    /**
     * Analyze a Recipe Search Query
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query. (required)
     * @return AnalyzeARecipeSearchQuery200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query">Analyze a Recipe Search Query Documentation</a>
     */
    public AnalyzeARecipeSearchQuery200Response analyzeARecipeSearchQuery(String q) throws ApiException {
        ApiResponse<AnalyzeARecipeSearchQuery200Response> localVarResp = analyzeARecipeSearchQueryWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * Analyze a Recipe Search Query
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query. (required)
     * @return ApiResponse&lt;AnalyzeARecipeSearchQuery200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query">Analyze a Recipe Search Query Documentation</a>
     */
    public ApiResponse<AnalyzeARecipeSearchQuery200Response> analyzeARecipeSearchQueryWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = analyzeARecipeSearchQueryValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<AnalyzeARecipeSearchQuery200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze a Recipe Search Query (asynchronously)
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query">Analyze a Recipe Search Query Documentation</a>
     */
    public okhttp3.Call analyzeARecipeSearchQueryAsync(String q, final ApiCallback<AnalyzeARecipeSearchQuery200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeARecipeSearchQueryValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeARecipeSearchQuery200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for analyzeRecipeInstructions
     * @param contentType The content type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions">Analyze Recipe Instructions Documentation</a>
     */
    public okhttp3.Call analyzeRecipeInstructionsCall(String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/analyzeInstructions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyzeRecipeInstructionsValidateBeforeCall(String contentType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = analyzeRecipeInstructionsCall(contentType, _callback);
        return localVarCall;

    }

    /**
     * Analyze Recipe Instructions
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     * @param contentType The content type. (optional)
     * @return AnalyzeRecipeInstructions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions">Analyze Recipe Instructions Documentation</a>
     */
    public AnalyzeRecipeInstructions200Response analyzeRecipeInstructions(String contentType) throws ApiException {
        ApiResponse<AnalyzeRecipeInstructions200Response> localVarResp = analyzeRecipeInstructionsWithHttpInfo(contentType);
        return localVarResp.getData();
    }

    /**
     * Analyze Recipe Instructions
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     * @param contentType The content type. (optional)
     * @return ApiResponse&lt;AnalyzeRecipeInstructions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions">Analyze Recipe Instructions Documentation</a>
     */
    public ApiResponse<AnalyzeRecipeInstructions200Response> analyzeRecipeInstructionsWithHttpInfo(String contentType) throws ApiException {
        okhttp3.Call localVarCall = analyzeRecipeInstructionsValidateBeforeCall(contentType, null);
        Type localVarReturnType = new TypeToken<AnalyzeRecipeInstructions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Analyze Recipe Instructions (asynchronously)
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
     * @param contentType The content type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions">Analyze Recipe Instructions Documentation</a>
     */
    public okhttp3.Call analyzeRecipeInstructionsAsync(String contentType, final ApiCallback<AnalyzeRecipeInstructions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyzeRecipeInstructionsValidateBeforeCall(contentType, _callback);
        Type localVarReturnType = new TypeToken<AnalyzeRecipeInstructions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for autocompleteRecipeSearch
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search">Autocomplete Recipe Search Documentation</a>
     */
    public okhttp3.Call autocompleteRecipeSearchCall(String query, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/autocomplete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteRecipeSearchValidateBeforeCall(String query, Integer number, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = autocompleteRecipeSearchCall(query, number, _callback);
        return localVarCall;

    }

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return Set&lt;AutocompleteRecipeSearch200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search">Autocomplete Recipe Search Documentation</a>
     */
    public Set<AutocompleteRecipeSearch200ResponseInner> autocompleteRecipeSearch(String query, Integer number) throws ApiException {
        ApiResponse<Set<AutocompleteRecipeSearch200ResponseInner>> localVarResp = autocompleteRecipeSearchWithHttpInfo(query, number);
        return localVarResp.getData();
    }

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse&lt;Set&lt;AutocompleteRecipeSearch200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search">Autocomplete Recipe Search Documentation</a>
     */
    public ApiResponse<Set<AutocompleteRecipeSearch200ResponseInner>> autocompleteRecipeSearchWithHttpInfo(String query, Integer number) throws ApiException {
        okhttp3.Call localVarCall = autocompleteRecipeSearchValidateBeforeCall(query, number, null);
        Type localVarReturnType = new TypeToken<Set<AutocompleteRecipeSearch200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete Recipe Search (asynchronously)
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search">Autocomplete Recipe Search Documentation</a>
     */
    public okhttp3.Call autocompleteRecipeSearchAsync(String query, Integer number, final ApiCallback<Set<AutocompleteRecipeSearch200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteRecipeSearchValidateBeforeCall(query, number, _callback);
        Type localVarReturnType = new TypeToken<Set<AutocompleteRecipeSearch200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyCuisine
     * @param contentType The content type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Cuisine">Classify Cuisine Documentation</a>
     */
    public okhttp3.Call classifyCuisineCall(String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/cuisine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyCuisineValidateBeforeCall(String contentType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = classifyCuisineCall(contentType, _callback);
        return localVarCall;

    }

    /**
     * Classify Cuisine
     * Classify the recipe&#39;s cuisine.
     * @param contentType The content type. (optional)
     * @return ClassifyCuisine200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Cuisine">Classify Cuisine Documentation</a>
     */
    public ClassifyCuisine200Response classifyCuisine(String contentType) throws ApiException {
        ApiResponse<ClassifyCuisine200Response> localVarResp = classifyCuisineWithHttpInfo(contentType);
        return localVarResp.getData();
    }

    /**
     * Classify Cuisine
     * Classify the recipe&#39;s cuisine.
     * @param contentType The content type. (optional)
     * @return ApiResponse&lt;ClassifyCuisine200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Cuisine">Classify Cuisine Documentation</a>
     */
    public ApiResponse<ClassifyCuisine200Response> classifyCuisineWithHttpInfo(String contentType) throws ApiException {
        okhttp3.Call localVarCall = classifyCuisineValidateBeforeCall(contentType, null);
        Type localVarReturnType = new TypeToken<ClassifyCuisine200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify Cuisine (asynchronously)
     * Classify the recipe&#39;s cuisine.
     * @param contentType The content type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Cuisine">Classify Cuisine Documentation</a>
     */
    public okhttp3.Call classifyCuisineAsync(String contentType, final ApiCallback<ClassifyCuisine200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyCuisineValidateBeforeCall(contentType, _callback);
        Type localVarReturnType = new TypeToken<ClassifyCuisine200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for computeGlycemicLoad
     * @param computeGlycemicLoadRequest  (required)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Glycemic-Load">Compute Glycemic Load Documentation</a>
     */
    public okhttp3.Call computeGlycemicLoadCall(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = computeGlycemicLoadRequest;

        // create path and map variables
        String localVarPath = "/food/ingredients/glycemicLoad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call computeGlycemicLoadValidateBeforeCall(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, String language, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'computeGlycemicLoadRequest' is set
        if (computeGlycemicLoadRequest == null) {
            throw new ApiException("Missing the required parameter 'computeGlycemicLoadRequest' when calling computeGlycemicLoad(Async)");
        }
        

        okhttp3.Call localVarCall = computeGlycemicLoadCall(computeGlycemicLoadRequest, language, _callback);
        return localVarCall;

    }

    /**
     * Compute Glycemic Load
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param computeGlycemicLoadRequest  (required)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ComputeGlycemicLoad200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Glycemic-Load">Compute Glycemic Load Documentation</a>
     */
    public ComputeGlycemicLoad200Response computeGlycemicLoad(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, String language) throws ApiException {
        ApiResponse<ComputeGlycemicLoad200Response> localVarResp = computeGlycemicLoadWithHttpInfo(computeGlycemicLoadRequest, language);
        return localVarResp.getData();
    }

    /**
     * Compute Glycemic Load
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param computeGlycemicLoadRequest  (required)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse&lt;ComputeGlycemicLoad200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Glycemic-Load">Compute Glycemic Load Documentation</a>
     */
    public ApiResponse<ComputeGlycemicLoad200Response> computeGlycemicLoadWithHttpInfo(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, String language) throws ApiException {
        okhttp3.Call localVarCall = computeGlycemicLoadValidateBeforeCall(computeGlycemicLoadRequest, language, null);
        Type localVarReturnType = new TypeToken<ComputeGlycemicLoad200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compute Glycemic Load (asynchronously)
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param computeGlycemicLoadRequest  (required)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Compute-Glycemic-Load">Compute Glycemic Load Documentation</a>
     */
    public okhttp3.Call computeGlycemicLoadAsync(ComputeGlycemicLoadRequest computeGlycemicLoadRequest, String language, final ApiCallback<ComputeGlycemicLoad200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = computeGlycemicLoadValidateBeforeCall(computeGlycemicLoadRequest, language, _callback);
        Type localVarReturnType = new TypeToken<ComputeGlycemicLoad200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for convertAmounts
     * @param ingredientName The ingredient which you want to convert. (required)
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Convert-Amounts">Convert Amounts Documentation</a>
     */
    public okhttp3.Call convertAmountsCall(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/convert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ingredientName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingredientName", ingredientName));
        }

        if (sourceAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAmount", sourceAmount));
        }

        if (sourceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceUnit", sourceUnit));
        }

        if (targetUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetUnit", targetUnit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertAmountsValidateBeforeCall(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ingredientName' is set
        if (ingredientName == null) {
            throw new ApiException("Missing the required parameter 'ingredientName' when calling convertAmounts(Async)");
        }
        
        // verify the required parameter 'sourceAmount' is set
        if (sourceAmount == null) {
            throw new ApiException("Missing the required parameter 'sourceAmount' when calling convertAmounts(Async)");
        }
        
        // verify the required parameter 'sourceUnit' is set
        if (sourceUnit == null) {
            throw new ApiException("Missing the required parameter 'sourceUnit' when calling convertAmounts(Async)");
        }
        
        // verify the required parameter 'targetUnit' is set
        if (targetUnit == null) {
            throw new ApiException("Missing the required parameter 'targetUnit' when calling convertAmounts(Async)");
        }
        

        okhttp3.Call localVarCall = convertAmountsCall(ingredientName, sourceAmount, sourceUnit, targetUnit, _callback);
        return localVarCall;

    }

    /**
     * Convert Amounts
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert. (required)
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @return ConvertAmounts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Convert-Amounts">Convert Amounts Documentation</a>
     */
    public ConvertAmounts200Response convertAmounts(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit) throws ApiException {
        ApiResponse<ConvertAmounts200Response> localVarResp = convertAmountsWithHttpInfo(ingredientName, sourceAmount, sourceUnit, targetUnit);
        return localVarResp.getData();
    }

    /**
     * Convert Amounts
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert. (required)
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @return ApiResponse&lt;ConvertAmounts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Convert-Amounts">Convert Amounts Documentation</a>
     */
    public ApiResponse<ConvertAmounts200Response> convertAmountsWithHttpInfo(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit) throws ApiException {
        okhttp3.Call localVarCall = convertAmountsValidateBeforeCall(ingredientName, sourceAmount, sourceUnit, targetUnit, null);
        Type localVarReturnType = new TypeToken<ConvertAmounts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert Amounts (asynchronously)
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert. (required)
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. (required)
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Convert-Amounts">Convert Amounts Documentation</a>
     */
    public okhttp3.Call convertAmountsAsync(String ingredientName, BigDecimal sourceAmount, String sourceUnit, String targetUnit, final ApiCallback<ConvertAmounts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertAmountsValidateBeforeCall(ingredientName, sourceAmount, sourceUnit, targetUnit, _callback);
        Type localVarReturnType = new TypeToken<ConvertAmounts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRecipeCard
     * @param contentType The content type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Create-Recipe-Card">Create Recipe Card Documentation</a>
     */
    public okhttp3.Call createRecipeCardCall(String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/visualizeRecipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecipeCardValidateBeforeCall(String contentType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createRecipeCardCall(contentType, _callback);
        return localVarCall;

    }

    /**
     * Create Recipe Card
     * Generate a recipe card for a recipe.
     * @param contentType The content type. (optional)
     * @return CreateRecipeCard200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Create-Recipe-Card">Create Recipe Card Documentation</a>
     */
    public CreateRecipeCard200Response createRecipeCard(String contentType) throws ApiException {
        ApiResponse<CreateRecipeCard200Response> localVarResp = createRecipeCardWithHttpInfo(contentType);
        return localVarResp.getData();
    }

    /**
     * Create Recipe Card
     * Generate a recipe card for a recipe.
     * @param contentType The content type. (optional)
     * @return ApiResponse&lt;CreateRecipeCard200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Create-Recipe-Card">Create Recipe Card Documentation</a>
     */
    public ApiResponse<CreateRecipeCard200Response> createRecipeCardWithHttpInfo(String contentType) throws ApiException {
        okhttp3.Call localVarCall = createRecipeCardValidateBeforeCall(contentType, null);
        Type localVarReturnType = new TypeToken<CreateRecipeCard200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Recipe Card (asynchronously)
     * Generate a recipe card for a recipe.
     * @param contentType The content type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Create-Recipe-Card">Create Recipe Card Documentation</a>
     */
    public okhttp3.Call createRecipeCardAsync(String contentType, final ApiCallback<CreateRecipeCard200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecipeCardValidateBeforeCall(contentType, _callback);
        Type localVarReturnType = new TypeToken<CreateRecipeCard200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for equipmentByIDImage
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID-Image">Equipment by ID Image Documentation</a>
     */
    public okhttp3.Call equipmentByIDImageCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/equipmentWidget.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call equipmentByIDImageValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling equipmentByIDImage(Async)");
        }
        

        okhttp3.Call localVarCall = equipmentByIDImageCall(id, _callback);
        return localVarCall;

    }

    /**
     * Equipment by ID Image
     * Visualize a recipe&#39;s equipment list as an image.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID-Image">Equipment by ID Image Documentation</a>
     */
    public Object equipmentByIDImage(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = equipmentByIDImageWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Equipment by ID Image
     * Visualize a recipe&#39;s equipment list as an image.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID-Image">Equipment by ID Image Documentation</a>
     */
    public ApiResponse<Object> equipmentByIDImageWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = equipmentByIDImageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Equipment by ID Image (asynchronously)
     * Visualize a recipe&#39;s equipment list as an image.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID-Image">Equipment by ID Image Documentation</a>
     */
    public okhttp3.Call equipmentByIDImageAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = equipmentByIDImageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extractRecipeFromWebsite
     * @param url The URL of the recipe page. (required)
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website">Extract Recipe from Website Documentation</a>
     */
    public okhttp3.Call extractRecipeFromWebsiteCall(String url, Boolean forceExtraction, Boolean analyze, Boolean includeNutrition, Boolean includeTaste, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/extract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (forceExtraction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceExtraction", forceExtraction));
        }

        if (analyze != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analyze", analyze));
        }

        if (includeNutrition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeNutrition", includeNutrition));
        }

        if (includeTaste != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTaste", includeTaste));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractRecipeFromWebsiteValidateBeforeCall(String url, Boolean forceExtraction, Boolean analyze, Boolean includeNutrition, Boolean includeTaste, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling extractRecipeFromWebsite(Async)");
        }
        

        okhttp3.Call localVarCall = extractRecipeFromWebsiteCall(url, forceExtraction, analyze, includeNutrition, includeTaste, _callback);
        return localVarCall;

    }

    /**
     * Extract Recipe from Website
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page. (required)
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     * @return GetRecipeInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website">Extract Recipe from Website Documentation</a>
     */
    public GetRecipeInformation200Response extractRecipeFromWebsite(String url, Boolean forceExtraction, Boolean analyze, Boolean includeNutrition, Boolean includeTaste) throws ApiException {
        ApiResponse<GetRecipeInformation200Response> localVarResp = extractRecipeFromWebsiteWithHttpInfo(url, forceExtraction, analyze, includeNutrition, includeTaste);
        return localVarResp.getData();
    }

    /**
     * Extract Recipe from Website
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page. (required)
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     * @return ApiResponse&lt;GetRecipeInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website">Extract Recipe from Website Documentation</a>
     */
    public ApiResponse<GetRecipeInformation200Response> extractRecipeFromWebsiteWithHttpInfo(String url, Boolean forceExtraction, Boolean analyze, Boolean includeNutrition, Boolean includeTaste) throws ApiException {
        okhttp3.Call localVarCall = extractRecipeFromWebsiteValidateBeforeCall(url, forceExtraction, analyze, includeNutrition, includeTaste, null);
        Type localVarReturnType = new TypeToken<GetRecipeInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract Recipe from Website (asynchronously)
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page. (required)
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param includeTaste Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website">Extract Recipe from Website Documentation</a>
     */
    public okhttp3.Call extractRecipeFromWebsiteAsync(String url, Boolean forceExtraction, Boolean analyze, Boolean includeNutrition, Boolean includeTaste, final ApiCallback<GetRecipeInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractRecipeFromWebsiteValidateBeforeCall(url, forceExtraction, analyze, includeNutrition, includeTaste, _callback);
        Type localVarReturnType = new TypeToken<GetRecipeInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnalyzedRecipeInstructions
     * @param id The item&#39;s id. (required)
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions">Get Analyzed Recipe Instructions Documentation</a>
     */
    public okhttp3.Call getAnalyzedRecipeInstructionsCall(Integer id, Boolean stepBreakdown, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/analyzedInstructions"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (stepBreakdown != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stepBreakdown", stepBreakdown));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnalyzedRecipeInstructionsValidateBeforeCall(Integer id, Boolean stepBreakdown, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAnalyzedRecipeInstructions(Async)");
        }
        

        okhttp3.Call localVarCall = getAnalyzedRecipeInstructionsCall(id, stepBreakdown, _callback);
        return localVarCall;

    }

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The item&#39;s id. (required)
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @return GetAnalyzedRecipeInstructions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions">Get Analyzed Recipe Instructions Documentation</a>
     */
    public GetAnalyzedRecipeInstructions200Response getAnalyzedRecipeInstructions(Integer id, Boolean stepBreakdown) throws ApiException {
        ApiResponse<GetAnalyzedRecipeInstructions200Response> localVarResp = getAnalyzedRecipeInstructionsWithHttpInfo(id, stepBreakdown);
        return localVarResp.getData();
    }

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The item&#39;s id. (required)
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @return ApiResponse&lt;GetAnalyzedRecipeInstructions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions">Get Analyzed Recipe Instructions Documentation</a>
     */
    public ApiResponse<GetAnalyzedRecipeInstructions200Response> getAnalyzedRecipeInstructionsWithHttpInfo(Integer id, Boolean stepBreakdown) throws ApiException {
        okhttp3.Call localVarCall = getAnalyzedRecipeInstructionsValidateBeforeCall(id, stepBreakdown, null);
        Type localVarReturnType = new TypeToken<GetAnalyzedRecipeInstructions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Analyzed Recipe Instructions (asynchronously)
     * Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The item&#39;s id. (required)
     * @param stepBreakdown Whether to break down the recipe steps even more. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions">Get Analyzed Recipe Instructions Documentation</a>
     */
    public okhttp3.Call getAnalyzedRecipeInstructionsAsync(Integer id, Boolean stepBreakdown, final ApiCallback<GetAnalyzedRecipeInstructions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnalyzedRecipeInstructionsValidateBeforeCall(id, stepBreakdown, _callback);
        Type localVarReturnType = new TypeToken<GetAnalyzedRecipeInstructions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRandomRecipes
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Recipes">Get Random Recipes Documentation</a>
     */
    public okhttp3.Call getRandomRecipesCall(Boolean limitLicense, String tags, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRandomRecipesValidateBeforeCall(Boolean limitLicense, String tags, Integer number, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRandomRecipesCall(limitLicense, tags, number, _callback);
        return localVarCall;

    }

    /**
     * Get Random Recipes
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return GetRandomRecipes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Recipes">Get Random Recipes Documentation</a>
     */
    public GetRandomRecipes200Response getRandomRecipes(Boolean limitLicense, String tags, Integer number) throws ApiException {
        ApiResponse<GetRandomRecipes200Response> localVarResp = getRandomRecipesWithHttpInfo(limitLicense, tags, number);
        return localVarResp.getData();
    }

    /**
     * Get Random Recipes
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse&lt;GetRandomRecipes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Recipes">Get Random Recipes Documentation</a>
     */
    public ApiResponse<GetRandomRecipes200Response> getRandomRecipesWithHttpInfo(Boolean limitLicense, String tags, Integer number) throws ApiException {
        okhttp3.Call localVarCall = getRandomRecipesValidateBeforeCall(limitLicense, tags, number, null);
        Type localVarReturnType = new TypeToken<GetRandomRecipes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Random Recipes (asynchronously)
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Random-Recipes">Get Random Recipes Documentation</a>
     */
    public okhttp3.Call getRandomRecipesAsync(Boolean limitLicense, String tags, Integer number, final ApiCallback<GetRandomRecipes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRandomRecipesValidateBeforeCall(limitLicense, tags, number, _callback);
        Type localVarReturnType = new TypeToken<GetRandomRecipes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeEquipmentByID
     * @param id The item&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID">Equipment by ID Documentation</a>
     */
    public okhttp3.Call getRecipeEquipmentByIDCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/equipmentWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeEquipmentByIDValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeEquipmentByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeEquipmentByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Equipment by ID
     * Get a recipe&#39;s equipment list.
     * @param id The item&#39;s id. (required)
     * @return GetRecipeEquipmentByID200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID">Equipment by ID Documentation</a>
     */
    public GetRecipeEquipmentByID200Response getRecipeEquipmentByID(Integer id) throws ApiException {
        ApiResponse<GetRecipeEquipmentByID200Response> localVarResp = getRecipeEquipmentByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Equipment by ID
     * Get a recipe&#39;s equipment list.
     * @param id The item&#39;s id. (required)
     * @return ApiResponse&lt;GetRecipeEquipmentByID200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID">Equipment by ID Documentation</a>
     */
    public ApiResponse<GetRecipeEquipmentByID200Response> getRecipeEquipmentByIDWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getRecipeEquipmentByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetRecipeEquipmentByID200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Equipment by ID (asynchronously)
     * Get a recipe&#39;s equipment list.
     * @param id The item&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID">Equipment by ID Documentation</a>
     */
    public okhttp3.Call getRecipeEquipmentByIDAsync(Integer id, final ApiCallback<GetRecipeEquipmentByID200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeEquipmentByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetRecipeEquipmentByID200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeInformation
     * @param id The item&#39;s id. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information">Get Recipe Information Documentation</a>
     */
    public okhttp3.Call getRecipeInformationCall(Integer id, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/information"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeNutrition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeNutrition", includeNutrition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeInformationValidateBeforeCall(Integer id, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeInformation(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeInformationCall(id, includeNutrition, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Information
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The item&#39;s id. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return GetRecipeInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information">Get Recipe Information Documentation</a>
     */
    public GetRecipeInformation200Response getRecipeInformation(Integer id, Boolean includeNutrition) throws ApiException {
        ApiResponse<GetRecipeInformation200Response> localVarResp = getRecipeInformationWithHttpInfo(id, includeNutrition);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Information
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The item&#39;s id. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return ApiResponse&lt;GetRecipeInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information">Get Recipe Information Documentation</a>
     */
    public ApiResponse<GetRecipeInformation200Response> getRecipeInformationWithHttpInfo(Integer id, Boolean includeNutrition) throws ApiException {
        okhttp3.Call localVarCall = getRecipeInformationValidateBeforeCall(id, includeNutrition, null);
        Type localVarReturnType = new TypeToken<GetRecipeInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Information (asynchronously)
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The item&#39;s id. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information">Get Recipe Information Documentation</a>
     */
    public okhttp3.Call getRecipeInformationAsync(Integer id, Boolean includeNutrition, final ApiCallback<GetRecipeInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeInformationValidateBeforeCall(id, includeNutrition, _callback);
        Type localVarReturnType = new TypeToken<GetRecipeInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeInformationBulk
     * @param ids A comma-separated list of recipe ids. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk">Get Recipe Information Bulk Documentation</a>
     */
    public okhttp3.Call getRecipeInformationBulkCall(String ids, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/informationBulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (includeNutrition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeNutrition", includeNutrition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeInformationBulkValidateBeforeCall(String ids, Boolean includeNutrition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getRecipeInformationBulk(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeInformationBulkCall(ids, includeNutrition, _callback);
        return localVarCall;

    }

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return Set&lt;GetRecipeInformationBulk200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk">Get Recipe Information Bulk Documentation</a>
     */
    public Set<GetRecipeInformationBulk200ResponseInner> getRecipeInformationBulk(String ids, Boolean includeNutrition) throws ApiException {
        ApiResponse<Set<GetRecipeInformationBulk200ResponseInner>> localVarResp = getRecipeInformationBulkWithHttpInfo(ids, includeNutrition);
        return localVarResp.getData();
    }

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @return ApiResponse&lt;Set&lt;GetRecipeInformationBulk200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk">Get Recipe Information Bulk Documentation</a>
     */
    public ApiResponse<Set<GetRecipeInformationBulk200ResponseInner>> getRecipeInformationBulkWithHttpInfo(String ids, Boolean includeNutrition) throws ApiException {
        okhttp3.Call localVarCall = getRecipeInformationBulkValidateBeforeCall(ids, includeNutrition, null);
        Type localVarReturnType = new TypeToken<Set<GetRecipeInformationBulk200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Recipe Information Bulk (asynchronously)
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids. (required)
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk">Get Recipe Information Bulk Documentation</a>
     */
    public okhttp3.Call getRecipeInformationBulkAsync(String ids, Boolean includeNutrition, final ApiCallback<Set<GetRecipeInformationBulk200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeInformationBulkValidateBeforeCall(ids, includeNutrition, _callback);
        Type localVarReturnType = new TypeToken<Set<GetRecipeInformationBulk200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeIngredientsByID
     * @param id The item&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID">Ingredients by ID Documentation</a>
     */
    public okhttp3.Call getRecipeIngredientsByIDCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/ingredientWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeIngredientsByIDValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeIngredientsByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeIngredientsByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Ingredients by ID
     * Get a recipe&#39;s ingredient list.
     * @param id The item&#39;s id. (required)
     * @return GetRecipeIngredientsByID200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID">Ingredients by ID Documentation</a>
     */
    public GetRecipeIngredientsByID200Response getRecipeIngredientsByID(Integer id) throws ApiException {
        ApiResponse<GetRecipeIngredientsByID200Response> localVarResp = getRecipeIngredientsByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Ingredients by ID
     * Get a recipe&#39;s ingredient list.
     * @param id The item&#39;s id. (required)
     * @return ApiResponse&lt;GetRecipeIngredientsByID200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID">Ingredients by ID Documentation</a>
     */
    public ApiResponse<GetRecipeIngredientsByID200Response> getRecipeIngredientsByIDWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getRecipeIngredientsByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetRecipeIngredientsByID200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ingredients by ID (asynchronously)
     * Get a recipe&#39;s ingredient list.
     * @param id The item&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID">Ingredients by ID Documentation</a>
     */
    public okhttp3.Call getRecipeIngredientsByIDAsync(Integer id, final ApiCallback<GetRecipeIngredientsByID200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeIngredientsByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetRecipeIngredientsByID200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeNutritionWidgetByID
     * @param id The item&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Nutrition-by-ID">Nutrition by ID Documentation</a>
     */
    public okhttp3.Call getRecipeNutritionWidgetByIDCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/nutritionWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeNutritionWidgetByIDValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeNutritionWidgetByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeNutritionWidgetByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Nutrition by ID
     * Get a recipe&#39;s nutrition data.
     * @param id The item&#39;s id. (required)
     * @return GetRecipeNutritionWidgetByID200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Nutrition-by-ID">Nutrition by ID Documentation</a>
     */
    public GetRecipeNutritionWidgetByID200Response getRecipeNutritionWidgetByID(Integer id) throws ApiException {
        ApiResponse<GetRecipeNutritionWidgetByID200Response> localVarResp = getRecipeNutritionWidgetByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Nutrition by ID
     * Get a recipe&#39;s nutrition data.
     * @param id The item&#39;s id. (required)
     * @return ApiResponse&lt;GetRecipeNutritionWidgetByID200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Nutrition-by-ID">Nutrition by ID Documentation</a>
     */
    public ApiResponse<GetRecipeNutritionWidgetByID200Response> getRecipeNutritionWidgetByIDWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getRecipeNutritionWidgetByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetRecipeNutritionWidgetByID200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Nutrition by ID (asynchronously)
     * Get a recipe&#39;s nutrition data.
     * @param id The item&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Nutrition-by-ID">Nutrition by ID Documentation</a>
     */
    public okhttp3.Call getRecipeNutritionWidgetByIDAsync(Integer id, final ApiCallback<GetRecipeNutritionWidgetByID200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeNutritionWidgetByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetRecipeNutritionWidgetByID200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipePriceBreakdownByID
     * @param id The item&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID">Price Breakdown by ID Documentation</a>
     */
    public okhttp3.Call getRecipePriceBreakdownByIDCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/priceBreakdownWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipePriceBreakdownByIDValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipePriceBreakdownByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipePriceBreakdownByIDCall(id, _callback);
        return localVarCall;

    }

    /**
     * Price Breakdown by ID
     * Get a recipe&#39;s price breakdown data.
     * @param id The item&#39;s id. (required)
     * @return GetRecipePriceBreakdownByID200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID">Price Breakdown by ID Documentation</a>
     */
    public GetRecipePriceBreakdownByID200Response getRecipePriceBreakdownByID(Integer id) throws ApiException {
        ApiResponse<GetRecipePriceBreakdownByID200Response> localVarResp = getRecipePriceBreakdownByIDWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Price Breakdown by ID
     * Get a recipe&#39;s price breakdown data.
     * @param id The item&#39;s id. (required)
     * @return ApiResponse&lt;GetRecipePriceBreakdownByID200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID">Price Breakdown by ID Documentation</a>
     */
    public ApiResponse<GetRecipePriceBreakdownByID200Response> getRecipePriceBreakdownByIDWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getRecipePriceBreakdownByIDValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetRecipePriceBreakdownByID200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Price Breakdown by ID (asynchronously)
     * Get a recipe&#39;s price breakdown data.
     * @param id The item&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID">Price Breakdown by ID Documentation</a>
     */
    public okhttp3.Call getRecipePriceBreakdownByIDAsync(Integer id, final ApiCallback<GetRecipePriceBreakdownByID200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipePriceBreakdownByIDValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetRecipePriceBreakdownByID200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecipeTasteByID
     * @param id The item&#39;s id. (required)
     * @param normalize Normalize to the strongest taste. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Taste-by-ID">Taste by ID Documentation</a>
     */
    public okhttp3.Call getRecipeTasteByIDCall(Integer id, Boolean normalize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/tasteWidget.json"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (normalize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalize", normalize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecipeTasteByIDValidateBeforeCall(Integer id, Boolean normalize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecipeTasteByID(Async)");
        }
        

        okhttp3.Call localVarCall = getRecipeTasteByIDCall(id, normalize, _callback);
        return localVarCall;

    }

    /**
     * Taste by ID
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id. (required)
     * @param normalize Normalize to the strongest taste. (optional, default to true)
     * @return GetRecipeTasteByID200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Taste-by-ID">Taste by ID Documentation</a>
     */
    public GetRecipeTasteByID200Response getRecipeTasteByID(Integer id, Boolean normalize) throws ApiException {
        ApiResponse<GetRecipeTasteByID200Response> localVarResp = getRecipeTasteByIDWithHttpInfo(id, normalize);
        return localVarResp.getData();
    }

    /**
     * Taste by ID
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id. (required)
     * @param normalize Normalize to the strongest taste. (optional, default to true)
     * @return ApiResponse&lt;GetRecipeTasteByID200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Taste-by-ID">Taste by ID Documentation</a>
     */
    public ApiResponse<GetRecipeTasteByID200Response> getRecipeTasteByIDWithHttpInfo(Integer id, Boolean normalize) throws ApiException {
        okhttp3.Call localVarCall = getRecipeTasteByIDValidateBeforeCall(id, normalize, null);
        Type localVarReturnType = new TypeToken<GetRecipeTasteByID200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Taste by ID (asynchronously)
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id. (required)
     * @param normalize Normalize to the strongest taste. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Taste-by-ID">Taste by ID Documentation</a>
     */
    public okhttp3.Call getRecipeTasteByIDAsync(Integer id, Boolean normalize, final ApiCallback<GetRecipeTasteByID200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecipeTasteByIDValidateBeforeCall(id, normalize, _callback);
        Type localVarReturnType = new TypeToken<GetRecipeTasteByID200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarRecipes
     * @param id The item&#39;s id. (required)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Similar-Recipes">Get Similar Recipes Documentation</a>
     */
    public okhttp3.Call getSimilarRecipesCall(Integer id, Integer number, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/similar"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarRecipesValidateBeforeCall(Integer id, Integer number, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSimilarRecipes(Async)");
        }
        

        okhttp3.Call localVarCall = getSimilarRecipesCall(id, number, limitLicense, _callback);
        return localVarCall;

    }

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param id The item&#39;s id. (required)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return Set&lt;GetSimilarRecipes200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Similar-Recipes">Get Similar Recipes Documentation</a>
     */
    public Set<GetSimilarRecipes200ResponseInner> getSimilarRecipes(Integer id, Integer number, Boolean limitLicense) throws ApiException {
        ApiResponse<Set<GetSimilarRecipes200ResponseInner>> localVarResp = getSimilarRecipesWithHttpInfo(id, number, limitLicense);
        return localVarResp.getData();
    }

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param id The item&#39;s id. (required)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return ApiResponse&lt;Set&lt;GetSimilarRecipes200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Similar-Recipes">Get Similar Recipes Documentation</a>
     */
    public ApiResponse<Set<GetSimilarRecipes200ResponseInner>> getSimilarRecipesWithHttpInfo(Integer id, Integer number, Boolean limitLicense) throws ApiException {
        okhttp3.Call localVarCall = getSimilarRecipesValidateBeforeCall(id, number, limitLicense, null);
        Type localVarReturnType = new TypeToken<Set<GetSimilarRecipes200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Similar Recipes (asynchronously)
     * Find recipes which are similar to the given one.
     * @param id The item&#39;s id. (required)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Similar-Recipes">Get Similar Recipes Documentation</a>
     */
    public okhttp3.Call getSimilarRecipesAsync(Integer id, Integer number, Boolean limitLicense, final ApiCallback<Set<GetSimilarRecipes200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarRecipesValidateBeforeCall(id, number, limitLicense, _callback);
        Type localVarReturnType = new TypeToken<Set<GetSimilarRecipes200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for guessNutritionByDishName
     * @param title The title of the dish. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name">Guess Nutrition by Dish Name Documentation</a>
     */
    public okhttp3.Call guessNutritionByDishNameCall(String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/guessNutrition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call guessNutritionByDishNameValidateBeforeCall(String title, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling guessNutritionByDishName(Async)");
        }
        

        okhttp3.Call localVarCall = guessNutritionByDishNameCall(title, _callback);
        return localVarCall;

    }

    /**
     * Guess Nutrition by Dish Name
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish. (required)
     * @return GuessNutritionByDishName200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name">Guess Nutrition by Dish Name Documentation</a>
     */
    public GuessNutritionByDishName200Response guessNutritionByDishName(String title) throws ApiException {
        ApiResponse<GuessNutritionByDishName200Response> localVarResp = guessNutritionByDishNameWithHttpInfo(title);
        return localVarResp.getData();
    }

    /**
     * Guess Nutrition by Dish Name
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish. (required)
     * @return ApiResponse&lt;GuessNutritionByDishName200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name">Guess Nutrition by Dish Name Documentation</a>
     */
    public ApiResponse<GuessNutritionByDishName200Response> guessNutritionByDishNameWithHttpInfo(String title) throws ApiException {
        okhttp3.Call localVarCall = guessNutritionByDishNameValidateBeforeCall(title, null);
        Type localVarReturnType = new TypeToken<GuessNutritionByDishName200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Guess Nutrition by Dish Name (asynchronously)
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name">Guess Nutrition by Dish Name Documentation</a>
     */
    public okhttp3.Call guessNutritionByDishNameAsync(String title, final ApiCallback<GuessNutritionByDishName200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = guessNutritionByDishNameValidateBeforeCall(title, _callback);
        Type localVarReturnType = new TypeToken<GuessNutritionByDishName200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ingredientsByIDImage
     * @param id The recipe id. (required)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image">Ingredients by ID Image Documentation</a>
     */
    public okhttp3.Call ingredientsByIDImageCall(BigDecimal id, String measure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/ingredientWidget.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (measure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("measure", measure));
        }

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingredientsByIDImageValidateBeforeCall(BigDecimal id, String measure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ingredientsByIDImage(Async)");
        }
        

        okhttp3.Call localVarCall = ingredientsByIDImageCall(id, measure, _callback);
        return localVarCall;

    }

    /**
     * Ingredients by ID Image
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image">Ingredients by ID Image Documentation</a>
     */
    public Object ingredientsByIDImage(BigDecimal id, String measure) throws ApiException {
        ApiResponse<Object> localVarResp = ingredientsByIDImageWithHttpInfo(id, measure);
        return localVarResp.getData();
    }

    /**
     * Ingredients by ID Image
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image">Ingredients by ID Image Documentation</a>
     */
    public ApiResponse<Object> ingredientsByIDImageWithHttpInfo(BigDecimal id, String measure) throws ApiException {
        okhttp3.Call localVarCall = ingredientsByIDImageValidateBeforeCall(id, measure, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ingredients by ID Image (asynchronously)
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id. (required)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image">Ingredients by ID Image Documentation</a>
     */
    public okhttp3.Call ingredientsByIDImageAsync(BigDecimal id, String measure, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingredientsByIDImageValidateBeforeCall(id, measure, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parseIngredients
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Parse-Ingredients">Parse Ingredients Documentation</a>
     */
    public okhttp3.Call parseIngredientsCall(String contentType, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/parseIngredients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parseIngredientsValidateBeforeCall(String contentType, String language, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = parseIngredientsCall(contentType, language, _callback);
        return localVarCall;

    }

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return Set&lt;ParseIngredients200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Parse-Ingredients">Parse Ingredients Documentation</a>
     */
    public Set<ParseIngredients200ResponseInner> parseIngredients(String contentType, String language) throws ApiException {
        ApiResponse<Set<ParseIngredients200ResponseInner>> localVarResp = parseIngredientsWithHttpInfo(contentType, language);
        return localVarResp.getData();
    }

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse&lt;Set&lt;ParseIngredients200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Parse-Ingredients">Parse Ingredients Documentation</a>
     */
    public ApiResponse<Set<ParseIngredients200ResponseInner>> parseIngredientsWithHttpInfo(String contentType, String language) throws ApiException {
        okhttp3.Call localVarCall = parseIngredientsValidateBeforeCall(contentType, language, null);
        Type localVarReturnType = new TypeToken<Set<ParseIngredients200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parse Ingredients (asynchronously)
     * Extract an ingredient from plain text.
     * @param contentType The content type. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Parse-Ingredients">Parse Ingredients Documentation</a>
     */
    public okhttp3.Call parseIngredientsAsync(String contentType, String language, final ApiCallback<Set<ParseIngredients200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = parseIngredientsValidateBeforeCall(contentType, language, _callback);
        Type localVarReturnType = new TypeToken<Set<ParseIngredients200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for priceBreakdownByIDImage
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Image">Price Breakdown by ID Image Documentation</a>
     */
    public okhttp3.Call priceBreakdownByIDImageCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/priceBreakdownWidget.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call priceBreakdownByIDImageValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling priceBreakdownByIDImage(Async)");
        }
        

        okhttp3.Call localVarCall = priceBreakdownByIDImageCall(id, _callback);
        return localVarCall;

    }

    /**
     * Price Breakdown by ID Image
     * Visualize a recipe&#39;s price breakdown.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Image">Price Breakdown by ID Image Documentation</a>
     */
    public Object priceBreakdownByIDImage(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = priceBreakdownByIDImageWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Price Breakdown by ID Image
     * Visualize a recipe&#39;s price breakdown.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Image">Price Breakdown by ID Image Documentation</a>
     */
    public ApiResponse<Object> priceBreakdownByIDImageWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = priceBreakdownByIDImageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Price Breakdown by ID Image (asynchronously)
     * Visualize a recipe&#39;s price breakdown.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Image">Price Breakdown by ID Image Documentation</a>
     */
    public okhttp3.Call priceBreakdownByIDImageAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = priceBreakdownByIDImageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for quickAnswer
     * @param q The nutrition related question. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Quick-Answer">Quick Answer Documentation</a>
     */
    public okhttp3.Call quickAnswerCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/quickAnswer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quickAnswerValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling quickAnswer(Async)");
        }
        

        okhttp3.Call localVarCall = quickAnswerCall(q, _callback);
        return localVarCall;

    }

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question. (required)
     * @return QuickAnswer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Quick-Answer">Quick Answer Documentation</a>
     */
    public QuickAnswer200Response quickAnswer(String q) throws ApiException {
        ApiResponse<QuickAnswer200Response> localVarResp = quickAnswerWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question. (required)
     * @return ApiResponse&lt;QuickAnswer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Quick-Answer">Quick Answer Documentation</a>
     */
    public ApiResponse<QuickAnswer200Response> quickAnswerWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = quickAnswerValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<QuickAnswer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Quick Answer (asynchronously)
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Quick-Answer">Quick Answer Documentation</a>
     */
    public okhttp3.Call quickAnswerAsync(String q, final ApiCallback<QuickAnswer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = quickAnswerValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<QuickAnswer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeNutritionByIDImage
     * @param id The recipe id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Image">Recipe Nutrition by ID Image Documentation</a>
     */
    public okhttp3.Call recipeNutritionByIDImageCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/nutritionWidget.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeNutritionByIDImageValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeNutritionByIDImage(Async)");
        }
        

        okhttp3.Call localVarCall = recipeNutritionByIDImageCall(id, _callback);
        return localVarCall;

    }

    /**
     * Recipe Nutrition by ID Image
     * Visualize a recipe&#39;s nutritional information as an image.
     * @param id The recipe id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Image">Recipe Nutrition by ID Image Documentation</a>
     */
    public Object recipeNutritionByIDImage(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = recipeNutritionByIDImageWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Recipe Nutrition by ID Image
     * Visualize a recipe&#39;s nutritional information as an image.
     * @param id The recipe id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Image">Recipe Nutrition by ID Image Documentation</a>
     */
    public ApiResponse<Object> recipeNutritionByIDImageWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = recipeNutritionByIDImageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recipe Nutrition by ID Image (asynchronously)
     * Visualize a recipe&#39;s nutritional information as an image.
     * @param id The recipe id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Image">Recipe Nutrition by ID Image Documentation</a>
     */
    public okhttp3.Call recipeNutritionByIDImageAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeNutritionByIDImageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeNutritionLabelImage
     * @param id The recipe id. (required)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Image">Recipe Nutrition Label Image Documentation</a>
     */
    public okhttp3.Call recipeNutritionLabelImageCall(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/nutritionLabel.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showOptionalNutrients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showOptionalNutrients", showOptionalNutrients));
        }

        if (showZeroValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showZeroValues", showZeroValues));
        }

        if (showIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showIngredients", showIngredients));
        }

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeNutritionLabelImageValidateBeforeCall(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeNutritionLabelImage(Async)");
        }
        

        okhttp3.Call localVarCall = recipeNutritionLabelImageCall(id, showOptionalNutrients, showZeroValues, showIngredients, _callback);
        return localVarCall;

    }

    /**
     * Recipe Nutrition Label Image
     * Get a recipe&#39;s nutrition label as an image.
     * @param id The recipe id. (required)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Image">Recipe Nutrition Label Image Documentation</a>
     */
    public Object recipeNutritionLabelImage(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
        ApiResponse<Object> localVarResp = recipeNutritionLabelImageWithHttpInfo(id, showOptionalNutrients, showZeroValues, showIngredients);
        return localVarResp.getData();
    }

    /**
     * Recipe Nutrition Label Image
     * Get a recipe&#39;s nutrition label as an image.
     * @param id The recipe id. (required)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Image">Recipe Nutrition Label Image Documentation</a>
     */
    public ApiResponse<Object> recipeNutritionLabelImageWithHttpInfo(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
        okhttp3.Call localVarCall = recipeNutritionLabelImageValidateBeforeCall(id, showOptionalNutrients, showZeroValues, showIngredients, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recipe Nutrition Label Image (asynchronously)
     * Get a recipe&#39;s nutrition label as an image.
     * @param id The recipe id. (required)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Image">Recipe Nutrition Label Image Documentation</a>
     */
    public okhttp3.Call recipeNutritionLabelImageAsync(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeNutritionLabelImageValidateBeforeCall(id, showOptionalNutrients, showZeroValues, showIngredients, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeNutritionLabelWidget
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Widget">Recipe Nutrition Label Widget Documentation</a>
     */
    public okhttp3.Call recipeNutritionLabelWidgetCall(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/nutritionLabel"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        if (showOptionalNutrients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showOptionalNutrients", showOptionalNutrients));
        }

        if (showZeroValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showZeroValues", showZeroValues));
        }

        if (showIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showIngredients", showIngredients));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeNutritionLabelWidgetValidateBeforeCall(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeNutritionLabelWidget(Async)");
        }
        

        okhttp3.Call localVarCall = recipeNutritionLabelWidgetCall(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, _callback);
        return localVarCall;

    }

    /**
     * Recipe Nutrition Label Widget
     * Get a recipe&#39;s nutrition label as an HTML widget.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Widget">Recipe Nutrition Label Widget Documentation</a>
     */
    public String recipeNutritionLabelWidget(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
        ApiResponse<String> localVarResp = recipeNutritionLabelWidgetWithHttpInfo(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
        return localVarResp.getData();
    }

    /**
     * Recipe Nutrition Label Widget
     * Get a recipe&#39;s nutrition label as an HTML widget.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Widget">Recipe Nutrition Label Widget Documentation</a>
     */
    public ApiResponse<String> recipeNutritionLabelWidgetWithHttpInfo(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
        okhttp3.Call localVarCall = recipeNutritionLabelWidgetValidateBeforeCall(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recipe Nutrition Label Widget (asynchronously)
     * Get a recipe&#39;s nutrition label as an HTML widget.
     * @param id The recipe id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Widget">Recipe Nutrition Label Widget Documentation</a>
     */
    public okhttp3.Call recipeNutritionLabelWidgetAsync(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeNutritionLabelWidgetValidateBeforeCall(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recipeTasteByIDImage
     * @param id The recipe id. (required)
     * @param normalize Normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Image">Recipe Taste by ID Image Documentation</a>
     */
    public okhttp3.Call recipeTasteByIDImageCall(BigDecimal id, Boolean normalize, String rgb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/tasteWidget.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (normalize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalize", normalize));
        }

        if (rgb != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rgb", rgb));
        }

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recipeTasteByIDImageValidateBeforeCall(BigDecimal id, Boolean normalize, String rgb, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling recipeTasteByIDImage(Async)");
        }
        

        okhttp3.Call localVarCall = recipeTasteByIDImageCall(id, normalize, rgb, _callback);
        return localVarCall;

    }

    /**
     * Recipe Taste by ID Image
     * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @param normalize Normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Image">Recipe Taste by ID Image Documentation</a>
     */
    public Object recipeTasteByIDImage(BigDecimal id, Boolean normalize, String rgb) throws ApiException {
        ApiResponse<Object> localVarResp = recipeTasteByIDImageWithHttpInfo(id, normalize, rgb);
        return localVarResp.getData();
    }

    /**
     * Recipe Taste by ID Image
     * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @param normalize Normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Image">Recipe Taste by ID Image Documentation</a>
     */
    public ApiResponse<Object> recipeTasteByIDImageWithHttpInfo(BigDecimal id, Boolean normalize, String rgb) throws ApiException {
        okhttp3.Call localVarCall = recipeTasteByIDImageValidateBeforeCall(id, normalize, rgb, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recipe Taste by ID Image (asynchronously)
     * Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id. (required)
     * @param normalize Normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Image">Recipe Taste by ID Image Documentation</a>
     */
    public okhttp3.Call recipeTasteByIDImageAsync(BigDecimal id, Boolean normalize, String rgb, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = recipeTasteByIDImageValidateBeforeCall(id, normalize, rgb, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRecipes
     * @param query The (natural language) search query. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes">Search Recipes Documentation</a>
     */
    public okhttp3.Call searchRecipesCall(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/complexSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (cuisine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cuisine", cuisine));
        }

        if (excludeCuisine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeCuisine", excludeCuisine));
        }

        if (diet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("diet", diet));
        }

        if (intolerances != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("intolerances", intolerances));
        }

        if (equipment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("equipment", equipment));
        }

        if (includeIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeIngredients", includeIngredients));
        }

        if (excludeIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeIngredients", excludeIngredients));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (instructionsRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instructionsRequired", instructionsRequired));
        }

        if (fillIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fillIngredients", fillIngredients));
        }

        if (addRecipeInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addRecipeInformation", addRecipeInformation));
        }

        if (addRecipeNutrition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addRecipeNutrition", addRecipeNutrition));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (recipeBoxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recipeBoxId", recipeBoxId));
        }

        if (titleMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("titleMatch", titleMatch));
        }

        if (maxReadyTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxReadyTime", maxReadyTime));
        }

        if (ignorePantry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignorePantry", ignorePantry));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortDirection", sortDirection));
        }

        if (minCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbs", minCarbs));
        }

        if (maxCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbs", maxCarbs));
        }

        if (minProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProtein", minProtein));
        }

        if (maxProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProtein", maxProtein));
        }

        if (minCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalories", minCalories));
        }

        if (maxCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalories", maxCalories));
        }

        if (minFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFat", minFat));
        }

        if (maxFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFat", maxFat));
        }

        if (minAlcohol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minAlcohol", minAlcohol));
        }

        if (maxAlcohol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAlcohol", maxAlcohol));
        }

        if (minCaffeine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCaffeine", minCaffeine));
        }

        if (maxCaffeine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCaffeine", maxCaffeine));
        }

        if (minCopper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCopper", minCopper));
        }

        if (maxCopper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCopper", maxCopper));
        }

        if (minCalcium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalcium", minCalcium));
        }

        if (maxCalcium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalcium", maxCalcium));
        }

        if (minCholine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCholine", minCholine));
        }

        if (maxCholine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCholine", maxCholine));
        }

        if (minCholesterol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCholesterol", minCholesterol));
        }

        if (maxCholesterol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCholesterol", maxCholesterol));
        }

        if (minFluoride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFluoride", minFluoride));
        }

        if (maxFluoride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFluoride", maxFluoride));
        }

        if (minSaturatedFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSaturatedFat", minSaturatedFat));
        }

        if (maxSaturatedFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSaturatedFat", maxSaturatedFat));
        }

        if (minVitaminA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminA", minVitaminA));
        }

        if (maxVitaminA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminA", maxVitaminA));
        }

        if (minVitaminC != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminC", minVitaminC));
        }

        if (maxVitaminC != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminC", maxVitaminC));
        }

        if (minVitaminD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminD", minVitaminD));
        }

        if (maxVitaminD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminD", maxVitaminD));
        }

        if (minVitaminE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminE", minVitaminE));
        }

        if (maxVitaminE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminE", maxVitaminE));
        }

        if (minVitaminK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminK", minVitaminK));
        }

        if (maxVitaminK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminK", maxVitaminK));
        }

        if (minVitaminB1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB1", minVitaminB1));
        }

        if (maxVitaminB1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB1", maxVitaminB1));
        }

        if (minVitaminB2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB2", minVitaminB2));
        }

        if (maxVitaminB2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB2", maxVitaminB2));
        }

        if (minVitaminB5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB5", minVitaminB5));
        }

        if (maxVitaminB5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB5", maxVitaminB5));
        }

        if (minVitaminB3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB3", minVitaminB3));
        }

        if (maxVitaminB3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB3", maxVitaminB3));
        }

        if (minVitaminB6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB6", minVitaminB6));
        }

        if (maxVitaminB6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB6", maxVitaminB6));
        }

        if (minVitaminB12 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB12", minVitaminB12));
        }

        if (maxVitaminB12 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB12", maxVitaminB12));
        }

        if (minFiber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFiber", minFiber));
        }

        if (maxFiber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFiber", maxFiber));
        }

        if (minFolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFolate", minFolate));
        }

        if (maxFolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFolate", maxFolate));
        }

        if (minFolicAcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFolicAcid", minFolicAcid));
        }

        if (maxFolicAcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFolicAcid", maxFolicAcid));
        }

        if (minIodine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIodine", minIodine));
        }

        if (maxIodine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIodine", maxIodine));
        }

        if (minIron != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIron", minIron));
        }

        if (maxIron != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIron", maxIron));
        }

        if (minMagnesium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minMagnesium", minMagnesium));
        }

        if (maxMagnesium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxMagnesium", maxMagnesium));
        }

        if (minManganese != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minManganese", minManganese));
        }

        if (maxManganese != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxManganese", maxManganese));
        }

        if (minPhosphorus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPhosphorus", minPhosphorus));
        }

        if (maxPhosphorus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPhosphorus", maxPhosphorus));
        }

        if (minPotassium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPotassium", minPotassium));
        }

        if (maxPotassium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPotassium", maxPotassium));
        }

        if (minSelenium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSelenium", minSelenium));
        }

        if (maxSelenium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSelenium", maxSelenium));
        }

        if (minSodium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSodium", minSodium));
        }

        if (maxSodium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSodium", maxSodium));
        }

        if (minSugar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSugar", minSugar));
        }

        if (maxSugar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSugar", maxSugar));
        }

        if (minZinc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minZinc", minZinc));
        }

        if (maxZinc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxZinc", maxZinc));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRecipesValidateBeforeCall(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchRecipesCall(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, _callback);
        return localVarCall;

    }

    /**
     * Search Recipes
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) search query. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return SearchRecipes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes">Search Recipes Documentation</a>
     */
    public SearchRecipes200Response searchRecipes(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean limitLicense) throws ApiException {
        ApiResponse<SearchRecipes200Response> localVarResp = searchRecipesWithHttpInfo(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense);
        return localVarResp.getData();
    }

    /**
     * Search Recipes
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) search query. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return ApiResponse&lt;SearchRecipes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes">Search Recipes Documentation</a>
     */
    public ApiResponse<SearchRecipes200Response> searchRecipesWithHttpInfo(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean limitLicense) throws ApiException {
        okhttp3.Call localVarCall = searchRecipesValidateBeforeCall(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, null);
        Type localVarReturnType = new TypeToken<SearchRecipes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Recipes (asynchronously)
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) search query. (optional)
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param type The type of recipe. See a full list of supported meal types. (optional)
     * @param instructionsRequired Whether the recipes must have instructions. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned. (optional)
     * @param author The username of the recipe author. (optional)
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     * @param recipeBoxId The id of the recipe box to which the search should be limited to. (optional)
     * @param titleMatch Enter text that must be found in the title of the recipes. (optional)
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes">Search Recipes Documentation</a>
     */
    public okhttp3.Call searchRecipesAsync(String query, String cuisine, String excludeCuisine, String diet, String intolerances, String equipment, String includeIngredients, String excludeIngredients, String type, Boolean instructionsRequired, Boolean fillIngredients, Boolean addRecipeInformation, Boolean addRecipeNutrition, String author, String tags, BigDecimal recipeBoxId, String titleMatch, BigDecimal maxReadyTime, Boolean ignorePantry, String sort, String sortDirection, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean limitLicense, final ApiCallback<SearchRecipes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRecipesValidateBeforeCall(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense, _callback);
        Type localVarReturnType = new TypeToken<SearchRecipes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRecipesByIngredients
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients">Search Recipes by Ingredients Documentation</a>
     */
    public okhttp3.Call searchRecipesByIngredientsCall(String ingredients, Integer number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/findByIngredients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ingredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingredients", ingredients));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        if (ranking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ranking", ranking));
        }

        if (ignorePantry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignorePantry", ignorePantry));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRecipesByIngredientsValidateBeforeCall(String ingredients, Integer number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchRecipesByIngredientsCall(ingredients, number, limitLicense, ranking, ignorePantry, _callback);
        return localVarCall;

    }

    /**
     * Search Recipes by Ingredients
     *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @return Set&lt;SearchRecipesByIngredients200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients">Search Recipes by Ingredients Documentation</a>
     */
    public Set<SearchRecipesByIngredients200ResponseInner> searchRecipesByIngredients(String ingredients, Integer number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry) throws ApiException {
        ApiResponse<Set<SearchRecipesByIngredients200ResponseInner>> localVarResp = searchRecipesByIngredientsWithHttpInfo(ingredients, number, limitLicense, ranking, ignorePantry);
        return localVarResp.getData();
    }

    /**
     * Search Recipes by Ingredients
     *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @return ApiResponse&lt;Set&lt;SearchRecipesByIngredients200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients">Search Recipes by Ingredients Documentation</a>
     */
    public ApiResponse<Set<SearchRecipesByIngredients200ResponseInner>> searchRecipesByIngredientsWithHttpInfo(String ingredients, Integer number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry) throws ApiException {
        okhttp3.Call localVarCall = searchRecipesByIngredientsValidateBeforeCall(ingredients, number, limitLicense, ranking, ignorePantry, null);
        Type localVarReturnType = new TypeToken<Set<SearchRecipesByIngredients200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Recipes by Ingredients (asynchronously)
     *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients">Search Recipes by Ingredients Documentation</a>
     */
    public okhttp3.Call searchRecipesByIngredientsAsync(String ingredients, Integer number, Boolean limitLicense, BigDecimal ranking, Boolean ignorePantry, final ApiCallback<Set<SearchRecipesByIngredients200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRecipesByIngredientsValidateBeforeCall(ingredients, number, limitLicense, ranking, ignorePantry, _callback);
        Type localVarReturnType = new TypeToken<Set<SearchRecipesByIngredients200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchRecipesByNutrients
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients">Search Recipes by Nutrients Documentation</a>
     */
    public okhttp3.Call searchRecipesByNutrientsCall(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean random, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/findByNutrients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (minCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbs", minCarbs));
        }

        if (maxCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbs", maxCarbs));
        }

        if (minProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProtein", minProtein));
        }

        if (maxProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProtein", maxProtein));
        }

        if (minCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalories", minCalories));
        }

        if (maxCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalories", maxCalories));
        }

        if (minFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFat", minFat));
        }

        if (maxFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFat", maxFat));
        }

        if (minAlcohol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minAlcohol", minAlcohol));
        }

        if (maxAlcohol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAlcohol", maxAlcohol));
        }

        if (minCaffeine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCaffeine", minCaffeine));
        }

        if (maxCaffeine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCaffeine", maxCaffeine));
        }

        if (minCopper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCopper", minCopper));
        }

        if (maxCopper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCopper", maxCopper));
        }

        if (minCalcium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalcium", minCalcium));
        }

        if (maxCalcium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalcium", maxCalcium));
        }

        if (minCholine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCholine", minCholine));
        }

        if (maxCholine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCholine", maxCholine));
        }

        if (minCholesterol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCholesterol", minCholesterol));
        }

        if (maxCholesterol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCholesterol", maxCholesterol));
        }

        if (minFluoride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFluoride", minFluoride));
        }

        if (maxFluoride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFluoride", maxFluoride));
        }

        if (minSaturatedFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSaturatedFat", minSaturatedFat));
        }

        if (maxSaturatedFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSaturatedFat", maxSaturatedFat));
        }

        if (minVitaminA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminA", minVitaminA));
        }

        if (maxVitaminA != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminA", maxVitaminA));
        }

        if (minVitaminC != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminC", minVitaminC));
        }

        if (maxVitaminC != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminC", maxVitaminC));
        }

        if (minVitaminD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminD", minVitaminD));
        }

        if (maxVitaminD != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminD", maxVitaminD));
        }

        if (minVitaminE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminE", minVitaminE));
        }

        if (maxVitaminE != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminE", maxVitaminE));
        }

        if (minVitaminK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminK", minVitaminK));
        }

        if (maxVitaminK != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminK", maxVitaminK));
        }

        if (minVitaminB1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB1", minVitaminB1));
        }

        if (maxVitaminB1 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB1", maxVitaminB1));
        }

        if (minVitaminB2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB2", minVitaminB2));
        }

        if (maxVitaminB2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB2", maxVitaminB2));
        }

        if (minVitaminB5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB5", minVitaminB5));
        }

        if (maxVitaminB5 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB5", maxVitaminB5));
        }

        if (minVitaminB3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB3", minVitaminB3));
        }

        if (maxVitaminB3 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB3", maxVitaminB3));
        }

        if (minVitaminB6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB6", minVitaminB6));
        }

        if (maxVitaminB6 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB6", maxVitaminB6));
        }

        if (minVitaminB12 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minVitaminB12", minVitaminB12));
        }

        if (maxVitaminB12 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxVitaminB12", maxVitaminB12));
        }

        if (minFiber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFiber", minFiber));
        }

        if (maxFiber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFiber", maxFiber));
        }

        if (minFolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFolate", minFolate));
        }

        if (maxFolate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFolate", maxFolate));
        }

        if (minFolicAcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFolicAcid", minFolicAcid));
        }

        if (maxFolicAcid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFolicAcid", maxFolicAcid));
        }

        if (minIodine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIodine", minIodine));
        }

        if (maxIodine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIodine", maxIodine));
        }

        if (minIron != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minIron", minIron));
        }

        if (maxIron != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxIron", maxIron));
        }

        if (minMagnesium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minMagnesium", minMagnesium));
        }

        if (maxMagnesium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxMagnesium", maxMagnesium));
        }

        if (minManganese != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minManganese", minManganese));
        }

        if (maxManganese != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxManganese", maxManganese));
        }

        if (minPhosphorus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPhosphorus", minPhosphorus));
        }

        if (maxPhosphorus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPhosphorus", maxPhosphorus));
        }

        if (minPotassium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minPotassium", minPotassium));
        }

        if (maxPotassium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxPotassium", maxPotassium));
        }

        if (minSelenium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSelenium", minSelenium));
        }

        if (maxSelenium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSelenium", maxSelenium));
        }

        if (minSodium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSodium", minSodium));
        }

        if (maxSodium != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSodium", maxSodium));
        }

        if (minSugar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSugar", minSugar));
        }

        if (maxSugar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxSugar", maxSugar));
        }

        if (minZinc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minZinc", minZinc));
        }

        if (maxZinc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxZinc", maxZinc));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (random != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("random", random));
        }

        if (limitLicense != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limitLicense", limitLicense));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchRecipesByNutrientsValidateBeforeCall(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean random, Boolean limitLicense, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchRecipesByNutrientsCall(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, _callback);
        return localVarCall;

    }

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return Set&lt;SearchRecipesByNutrients200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients">Search Recipes by Nutrients Documentation</a>
     */
    public Set<SearchRecipesByNutrients200ResponseInner> searchRecipesByNutrients(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean random, Boolean limitLicense) throws ApiException {
        ApiResponse<Set<SearchRecipesByNutrients200ResponseInner>> localVarResp = searchRecipesByNutrientsWithHttpInfo(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense);
        return localVarResp.getData();
    }

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @return ApiResponse&lt;Set&lt;SearchRecipesByNutrients200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients">Search Recipes by Nutrients Documentation</a>
     */
    public ApiResponse<Set<SearchRecipesByNutrients200ResponseInner>> searchRecipesByNutrientsWithHttpInfo(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean random, Boolean limitLicense) throws ApiException {
        okhttp3.Call localVarCall = searchRecipesByNutrientsValidateBeforeCall(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, null);
        Type localVarReturnType = new TypeToken<Set<SearchRecipesByNutrients200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Recipes by Nutrients (asynchronously)
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have. (optional)
     * @param minCalories The minimum amount of calories the recipe must have. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param random If true, every request will give you a random set of recipes within the requested limits. (optional)
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients">Search Recipes by Nutrients Documentation</a>
     */
    public okhttp3.Call searchRecipesByNutrientsAsync(BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minFat, BigDecimal maxFat, BigDecimal minAlcohol, BigDecimal maxAlcohol, BigDecimal minCaffeine, BigDecimal maxCaffeine, BigDecimal minCopper, BigDecimal maxCopper, BigDecimal minCalcium, BigDecimal maxCalcium, BigDecimal minCholine, BigDecimal maxCholine, BigDecimal minCholesterol, BigDecimal maxCholesterol, BigDecimal minFluoride, BigDecimal maxFluoride, BigDecimal minSaturatedFat, BigDecimal maxSaturatedFat, BigDecimal minVitaminA, BigDecimal maxVitaminA, BigDecimal minVitaminC, BigDecimal maxVitaminC, BigDecimal minVitaminD, BigDecimal maxVitaminD, BigDecimal minVitaminE, BigDecimal maxVitaminE, BigDecimal minVitaminK, BigDecimal maxVitaminK, BigDecimal minVitaminB1, BigDecimal maxVitaminB1, BigDecimal minVitaminB2, BigDecimal maxVitaminB2, BigDecimal minVitaminB5, BigDecimal maxVitaminB5, BigDecimal minVitaminB3, BigDecimal maxVitaminB3, BigDecimal minVitaminB6, BigDecimal maxVitaminB6, BigDecimal minVitaminB12, BigDecimal maxVitaminB12, BigDecimal minFiber, BigDecimal maxFiber, BigDecimal minFolate, BigDecimal maxFolate, BigDecimal minFolicAcid, BigDecimal maxFolicAcid, BigDecimal minIodine, BigDecimal maxIodine, BigDecimal minIron, BigDecimal maxIron, BigDecimal minMagnesium, BigDecimal maxMagnesium, BigDecimal minManganese, BigDecimal maxManganese, BigDecimal minPhosphorus, BigDecimal maxPhosphorus, BigDecimal minPotassium, BigDecimal maxPotassium, BigDecimal minSelenium, BigDecimal maxSelenium, BigDecimal minSodium, BigDecimal maxSodium, BigDecimal minSugar, BigDecimal maxSugar, BigDecimal minZinc, BigDecimal maxZinc, Integer offset, Integer number, Boolean random, Boolean limitLicense, final ApiCallback<Set<SearchRecipesByNutrients200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchRecipesByNutrientsValidateBeforeCall(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense, _callback);
        Type localVarReturnType = new TypeToken<Set<SearchRecipesByNutrients200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for summarizeRecipe
     * @param id The item&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Summarize-Recipe">Summarize Recipe Documentation</a>
     */
    public okhttp3.Call summarizeRecipeCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/summary"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summarizeRecipeValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling summarizeRecipe(Async)");
        }
        

        okhttp3.Call localVarCall = summarizeRecipeCall(id, _callback);
        return localVarCall;

    }

    /**
     * Summarize Recipe
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The item&#39;s id. (required)
     * @return SummarizeRecipe200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Summarize-Recipe">Summarize Recipe Documentation</a>
     */
    public SummarizeRecipe200Response summarizeRecipe(Integer id) throws ApiException {
        ApiResponse<SummarizeRecipe200Response> localVarResp = summarizeRecipeWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Summarize Recipe
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The item&#39;s id. (required)
     * @return ApiResponse&lt;SummarizeRecipe200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Summarize-Recipe">Summarize Recipe Documentation</a>
     */
    public ApiResponse<SummarizeRecipe200Response> summarizeRecipeWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = summarizeRecipeValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SummarizeRecipe200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summarize Recipe (asynchronously)
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The item&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Summarize-Recipe">Summarize Recipe Documentation</a>
     */
    public okhttp3.Call summarizeRecipeAsync(Integer id, final ApiCallback<SummarizeRecipe200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = summarizeRecipeValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SummarizeRecipe200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeEquipment
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-Widget">Equipment Widget Documentation</a>
     */
    public okhttp3.Call visualizeEquipmentCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/visualizeEquipment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeEquipmentValidateBeforeCall(String contentType, String accept, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = visualizeEquipmentCall(contentType, accept, _callback);
        return localVarCall;

    }

    /**
     * Equipment Widget
     * Visualize the equipment used to make a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-Widget">Equipment Widget Documentation</a>
     */
    public String visualizeEquipment(String contentType, String accept) throws ApiException {
        ApiResponse<String> localVarResp = visualizeEquipmentWithHttpInfo(contentType, accept);
        return localVarResp.getData();
    }

    /**
     * Equipment Widget
     * Visualize the equipment used to make a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-Widget">Equipment Widget Documentation</a>
     */
    public ApiResponse<String> visualizeEquipmentWithHttpInfo(String contentType, String accept) throws ApiException {
        okhttp3.Call localVarCall = visualizeEquipmentValidateBeforeCall(contentType, accept, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Equipment Widget (asynchronously)
     * Visualize the equipment used to make a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-Widget">Equipment Widget Documentation</a>
     */
    public okhttp3.Call visualizeEquipmentAsync(String contentType, String accept, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeEquipmentValidateBeforeCall(contentType, accept, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizePriceBreakdown
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-Widget">Price Breakdown Widget Documentation</a>
     */
    public okhttp3.Call visualizePriceBreakdownCall(String contentType, String accept, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/visualizePriceEstimator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizePriceBreakdownValidateBeforeCall(String contentType, String accept, String language, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = visualizePriceBreakdownCall(contentType, accept, language, _callback);
        return localVarCall;

    }

    /**
     * Price Breakdown Widget
     * Visualize the price breakdown of a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-Widget">Price Breakdown Widget Documentation</a>
     */
    public String visualizePriceBreakdown(String contentType, String accept, String language) throws ApiException {
        ApiResponse<String> localVarResp = visualizePriceBreakdownWithHttpInfo(contentType, accept, language);
        return localVarResp.getData();
    }

    /**
     * Price Breakdown Widget
     * Visualize the price breakdown of a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-Widget">Price Breakdown Widget Documentation</a>
     */
    public ApiResponse<String> visualizePriceBreakdownWithHttpInfo(String contentType, String accept, String language) throws ApiException {
        okhttp3.Call localVarCall = visualizePriceBreakdownValidateBeforeCall(contentType, accept, language, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Price Breakdown Widget (asynchronously)
     * Visualize the price breakdown of a recipe.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-Widget">Price Breakdown Widget Documentation</a>
     */
    public okhttp3.Call visualizePriceBreakdownAsync(String contentType, String accept, String language, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizePriceBreakdownValidateBeforeCall(contentType, accept, language, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeEquipmentByID
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID-Widget">Equipment by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeEquipmentByIDCall(Integer id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/equipmentWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeEquipmentByIDValidateBeforeCall(Integer id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipeEquipmentByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeEquipmentByIDCall(id, defaultCss, _callback);
        return localVarCall;

    }

    /**
     * Equipment by ID Widget
     * Visualize a recipe&#39;s equipment list.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID-Widget">Equipment by ID Widget Documentation</a>
     */
    public String visualizeRecipeEquipmentByID(Integer id, Boolean defaultCss) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeEquipmentByIDWithHttpInfo(id, defaultCss);
        return localVarResp.getData();
    }

    /**
     * Equipment by ID Widget
     * Visualize a recipe&#39;s equipment list.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID-Widget">Equipment by ID Widget Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeEquipmentByIDWithHttpInfo(Integer id, Boolean defaultCss) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeEquipmentByIDValidateBeforeCall(id, defaultCss, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Equipment by ID Widget (asynchronously)
     * Visualize a recipe&#39;s equipment list.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Equipment-by-ID-Widget">Equipment by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeEquipmentByIDAsync(Integer id, Boolean defaultCss, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeEquipmentByIDValidateBeforeCall(id, defaultCss, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeIngredientsByID
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Widget">Ingredients by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeIngredientsByIDCall(Integer id, Boolean defaultCss, String measure, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/ingredientWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        if (measure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("measure", measure));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeIngredientsByIDValidateBeforeCall(Integer id, Boolean defaultCss, String measure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipeIngredientsByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeIngredientsByIDCall(id, defaultCss, measure, _callback);
        return localVarCall;

    }

    /**
     * Ingredients by ID Widget
     * Visualize a recipe&#39;s ingredient list.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Widget">Ingredients by ID Widget Documentation</a>
     */
    public String visualizeRecipeIngredientsByID(Integer id, Boolean defaultCss, String measure) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeIngredientsByIDWithHttpInfo(id, defaultCss, measure);
        return localVarResp.getData();
    }

    /**
     * Ingredients by ID Widget
     * Visualize a recipe&#39;s ingredient list.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Widget">Ingredients by ID Widget Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeIngredientsByIDWithHttpInfo(Integer id, Boolean defaultCss, String measure) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeIngredientsByIDValidateBeforeCall(id, defaultCss, measure, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ingredients by ID Widget (asynchronously)
     * Visualize a recipe&#39;s ingredient list.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Ingredients-by-ID-Widget">Ingredients by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeIngredientsByIDAsync(Integer id, Boolean defaultCss, String measure, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeIngredientsByIDValidateBeforeCall(id, defaultCss, measure, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeNutrition
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Widget">Recipe Nutrition Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeNutritionCall(String contentType, String accept, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/visualizeNutrition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeNutritionValidateBeforeCall(String contentType, String accept, String language, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = visualizeRecipeNutritionCall(contentType, accept, language, _callback);
        return localVarCall;

    }

    /**
     * Recipe Nutrition Widget
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Widget">Recipe Nutrition Widget Documentation</a>
     */
    public String visualizeRecipeNutrition(String contentType, String accept, String language) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeNutritionWithHttpInfo(contentType, accept, language);
        return localVarResp.getData();
    }

    /**
     * Recipe Nutrition Widget
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Widget">Recipe Nutrition Widget Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeNutritionWithHttpInfo(String contentType, String accept, String language) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeNutritionValidateBeforeCall(contentType, accept, language, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recipe Nutrition Widget (asynchronously)
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-Widget">Recipe Nutrition Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeNutritionAsync(String contentType, String accept, String language, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeNutritionValidateBeforeCall(contentType, accept, language, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeNutritionByID
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Widget">Recipe Nutrition by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeNutritionByIDCall(Integer id, Boolean defaultCss, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/nutritionWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeNutritionByIDValidateBeforeCall(Integer id, Boolean defaultCss, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipeNutritionByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeNutritionByIDCall(id, defaultCss, accept, _callback);
        return localVarCall;

    }

    /**
     * Recipe Nutrition by ID Widget
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Widget">Recipe Nutrition by ID Widget Documentation</a>
     */
    public String visualizeRecipeNutritionByID(Integer id, Boolean defaultCss, String accept) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeNutritionByIDWithHttpInfo(id, defaultCss, accept);
        return localVarResp.getData();
    }

    /**
     * Recipe Nutrition by ID Widget
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Widget">Recipe Nutrition by ID Widget Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeNutritionByIDWithHttpInfo(Integer id, Boolean defaultCss, String accept) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeNutritionByIDValidateBeforeCall(id, defaultCss, accept, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recipe Nutrition by ID Widget (asynchronously)
     * Visualize a recipe&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Widget">Recipe Nutrition by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeNutritionByIDAsync(Integer id, Boolean defaultCss, String accept, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeNutritionByIDValidateBeforeCall(id, defaultCss, accept, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipePriceBreakdownByID
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Widget">Price Breakdown by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipePriceBreakdownByIDCall(Integer id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/priceBreakdownWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipePriceBreakdownByIDValidateBeforeCall(Integer id, Boolean defaultCss, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipePriceBreakdownByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipePriceBreakdownByIDCall(id, defaultCss, _callback);
        return localVarCall;

    }

    /**
     * Price Breakdown by ID Widget
     * Visualize a recipe&#39;s price breakdown.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Widget">Price Breakdown by ID Widget Documentation</a>
     */
    public String visualizeRecipePriceBreakdownByID(Integer id, Boolean defaultCss) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipePriceBreakdownByIDWithHttpInfo(id, defaultCss);
        return localVarResp.getData();
    }

    /**
     * Price Breakdown by ID Widget
     * Visualize a recipe&#39;s price breakdown.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Widget">Price Breakdown by ID Widget Documentation</a>
     */
    public ApiResponse<String> visualizeRecipePriceBreakdownByIDWithHttpInfo(Integer id, Boolean defaultCss) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipePriceBreakdownByIDValidateBeforeCall(id, defaultCss, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Price Breakdown by ID Widget (asynchronously)
     * Visualize a recipe&#39;s price breakdown.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Widget">Price Breakdown by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipePriceBreakdownByIDAsync(Integer id, Boolean defaultCss, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipePriceBreakdownByIDValidateBeforeCall(id, defaultCss, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeTaste
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param normalize Whether to normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-Widget">Recipe Taste Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeTasteCall(String language, String contentType, String accept, Boolean normalize, String rgb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/visualizeTaste";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (normalize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalize", normalize));
        }

        if (rgb != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rgb", rgb));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeTasteValidateBeforeCall(String language, String contentType, String accept, Boolean normalize, String rgb, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = visualizeRecipeTasteCall(language, contentType, accept, normalize, rgb, _callback);
        return localVarCall;

    }

    /**
     * Recipe Taste Widget
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param normalize Whether to normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-Widget">Recipe Taste Widget Documentation</a>
     */
    public String visualizeRecipeTaste(String language, String contentType, String accept, Boolean normalize, String rgb) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeTasteWithHttpInfo(language, contentType, accept, normalize, rgb);
        return localVarResp.getData();
    }

    /**
     * Recipe Taste Widget
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param normalize Whether to normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-Widget">Recipe Taste Widget Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeTasteWithHttpInfo(String language, String contentType, String accept, Boolean normalize, String rgb) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeTasteValidateBeforeCall(language, contentType, accept, normalize, rgb, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recipe Taste Widget (asynchronously)
     * Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param contentType The content type. (optional)
     * @param accept Accept header. (optional)
     * @param normalize Whether to normalize to the strongest taste. (optional)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-Widget">Recipe Taste Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeTasteAsync(String language, String contentType, String accept, Boolean normalize, String rgb, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeTasteValidateBeforeCall(language, contentType, accept, normalize, rgb, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeRecipeTasteByID
     * @param id The item&#39;s id. (required)
     * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Widget">Recipe Taste by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeTasteByIDCall(Integer id, Boolean normalize, String rgb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipes/{id}/tasteWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (normalize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("normalize", normalize));
        }

        if (rgb != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rgb", rgb));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeRecipeTasteByIDValidateBeforeCall(Integer id, Boolean normalize, String rgb, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeRecipeTasteByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeRecipeTasteByIDCall(id, normalize, rgb, _callback);
        return localVarCall;

    }

    /**
     * Recipe Taste by ID Widget
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id. (required)
     * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Widget">Recipe Taste by ID Widget Documentation</a>
     */
    public String visualizeRecipeTasteByID(Integer id, Boolean normalize, String rgb) throws ApiException {
        ApiResponse<String> localVarResp = visualizeRecipeTasteByIDWithHttpInfo(id, normalize, rgb);
        return localVarResp.getData();
    }

    /**
     * Recipe Taste by ID Widget
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id. (required)
     * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Widget">Recipe Taste by ID Widget Documentation</a>
     */
    public ApiResponse<String> visualizeRecipeTasteByIDWithHttpInfo(Integer id, Boolean normalize, String rgb) throws ApiException {
        okhttp3.Call localVarCall = visualizeRecipeTasteByIDValidateBeforeCall(id, normalize, rgb, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recipe Taste by ID Widget (asynchronously)
     * Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item&#39;s id. (required)
     * @param normalize Whether to normalize to the strongest taste. (optional, default to true)
     * @param rgb Red, green, blue values for the chart color. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Widget">Recipe Taste by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeRecipeTasteByIDAsync(Integer id, Boolean normalize, String rgb, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeRecipeTasteByIDValidateBeforeCall(id, normalize, rgb, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
