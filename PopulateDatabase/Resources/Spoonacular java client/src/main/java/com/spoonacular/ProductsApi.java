/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular;

import com.spoonacular.client.ApiCallback;
import com.spoonacular.client.ApiClient;
import com.spoonacular.client.ApiException;
import com.spoonacular.client.ApiResponse;
import com.spoonacular.client.Configuration;
import com.spoonacular.client.Pair;
import com.spoonacular.client.ProgressRequestBody;
import com.spoonacular.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.spoonacular.client.model.AutocompleteProductSearch200Response;
import java.math.BigDecimal;
import com.spoonacular.client.model.ClassifyGroceryProduct200Response;
import com.spoonacular.client.model.ClassifyGroceryProductBulk200ResponseInner;
import com.spoonacular.client.model.ClassifyGroceryProductBulkRequestInner;
import com.spoonacular.client.model.ClassifyGroceryProductRequest;
import com.spoonacular.client.model.GetComparableProducts200Response;
import com.spoonacular.client.model.GetProductInformation200Response;
import com.spoonacular.client.model.SearchGroceryProducts200Response;
import com.spoonacular.client.model.SearchGroceryProductsByUPC200Response;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autocompleteProductSearch
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Product-Search">Autocomplete Product Search Documentation</a>
     */
    public okhttp3.Call autocompleteProductSearchCall(String query, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompleteProductSearchValidateBeforeCall(String query, Integer number, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling autocompleteProductSearch(Async)");
        }
        

        okhttp3.Call localVarCall = autocompleteProductSearchCall(query, number, _callback);
        return localVarCall;

    }

    /**
     * Autocomplete Product Search
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return AutocompleteProductSearch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Product-Search">Autocomplete Product Search Documentation</a>
     */
    public AutocompleteProductSearch200Response autocompleteProductSearch(String query, Integer number) throws ApiException {
        ApiResponse<AutocompleteProductSearch200Response> localVarResp = autocompleteProductSearchWithHttpInfo(query, number);
        return localVarResp.getData();
    }

    /**
     * Autocomplete Product Search
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return ApiResponse&lt;AutocompleteProductSearch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Product-Search">Autocomplete Product Search Documentation</a>
     */
    public ApiResponse<AutocompleteProductSearch200Response> autocompleteProductSearchWithHttpInfo(String query, Integer number) throws ApiException {
        okhttp3.Call localVarCall = autocompleteProductSearchValidateBeforeCall(query, number, null);
        Type localVarReturnType = new TypeToken<AutocompleteProductSearch200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete Product Search (asynchronously)
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query. (required)
     * @param number The number of results to return (between 1 and 25). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Autocomplete-Product-Search">Autocomplete Product Search Documentation</a>
     */
    public okhttp3.Call autocompleteProductSearchAsync(String query, Integer number, final ApiCallback<AutocompleteProductSearch200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompleteProductSearchValidateBeforeCall(query, number, _callback);
        Type localVarReturnType = new TypeToken<AutocompleteProductSearch200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyGroceryProduct
     * @param classifyGroceryProductRequest  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product">Classify Grocery Product Documentation</a>
     */
    public okhttp3.Call classifyGroceryProductCall(ClassifyGroceryProductRequest classifyGroceryProductRequest, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = classifyGroceryProductRequest;

        // create path and map variables
        String localVarPath = "/food/products/classify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyGroceryProductValidateBeforeCall(ClassifyGroceryProductRequest classifyGroceryProductRequest, String locale, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'classifyGroceryProductRequest' is set
        if (classifyGroceryProductRequest == null) {
            throw new ApiException("Missing the required parameter 'classifyGroceryProductRequest' when calling classifyGroceryProduct(Async)");
        }
        

        okhttp3.Call localVarCall = classifyGroceryProductCall(classifyGroceryProductRequest, locale, _callback);
        return localVarCall;

    }

    /**
     * Classify Grocery Product
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @param classifyGroceryProductRequest  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return ClassifyGroceryProduct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product">Classify Grocery Product Documentation</a>
     */
    public ClassifyGroceryProduct200Response classifyGroceryProduct(ClassifyGroceryProductRequest classifyGroceryProductRequest, String locale) throws ApiException {
        ApiResponse<ClassifyGroceryProduct200Response> localVarResp = classifyGroceryProductWithHttpInfo(classifyGroceryProductRequest, locale);
        return localVarResp.getData();
    }

    /**
     * Classify Grocery Product
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @param classifyGroceryProductRequest  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return ApiResponse&lt;ClassifyGroceryProduct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product">Classify Grocery Product Documentation</a>
     */
    public ApiResponse<ClassifyGroceryProduct200Response> classifyGroceryProductWithHttpInfo(ClassifyGroceryProductRequest classifyGroceryProductRequest, String locale) throws ApiException {
        okhttp3.Call localVarCall = classifyGroceryProductValidateBeforeCall(classifyGroceryProductRequest, locale, null);
        Type localVarReturnType = new TypeToken<ClassifyGroceryProduct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify Grocery Product (asynchronously)
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @param classifyGroceryProductRequest  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product">Classify Grocery Product Documentation</a>
     */
    public okhttp3.Call classifyGroceryProductAsync(ClassifyGroceryProductRequest classifyGroceryProductRequest, String locale, final ApiCallback<ClassifyGroceryProduct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyGroceryProductValidateBeforeCall(classifyGroceryProductRequest, locale, _callback);
        Type localVarReturnType = new TypeToken<ClassifyGroceryProduct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for classifyGroceryProductBulk
     * @param classifyGroceryProductBulkRequestInner  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk">Classify Grocery Product Bulk Documentation</a>
     */
    public okhttp3.Call classifyGroceryProductBulkCall(Set<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = classifyGroceryProductBulkRequestInner;

        // create path and map variables
        String localVarPath = "/food/products/classifyBatch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call classifyGroceryProductBulkValidateBeforeCall(Set<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, String locale, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'classifyGroceryProductBulkRequestInner' is set
        if (classifyGroceryProductBulkRequestInner == null) {
            throw new ApiException("Missing the required parameter 'classifyGroceryProductBulkRequestInner' when calling classifyGroceryProductBulk(Async)");
        }
        

        okhttp3.Call localVarCall = classifyGroceryProductBulkCall(classifyGroceryProductBulkRequestInner, locale, _callback);
        return localVarCall;

    }

    /**
     * Classify Grocery Product Bulk
     * Provide a set of product jsons, get back classified products.
     * @param classifyGroceryProductBulkRequestInner  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return Set&lt;ClassifyGroceryProductBulk200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk">Classify Grocery Product Bulk Documentation</a>
     */
    public Set<ClassifyGroceryProductBulk200ResponseInner> classifyGroceryProductBulk(Set<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, String locale) throws ApiException {
        ApiResponse<Set<ClassifyGroceryProductBulk200ResponseInner>> localVarResp = classifyGroceryProductBulkWithHttpInfo(classifyGroceryProductBulkRequestInner, locale);
        return localVarResp.getData();
    }

    /**
     * Classify Grocery Product Bulk
     * Provide a set of product jsons, get back classified products.
     * @param classifyGroceryProductBulkRequestInner  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return ApiResponse&lt;Set&lt;ClassifyGroceryProductBulk200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk">Classify Grocery Product Bulk Documentation</a>
     */
    public ApiResponse<Set<ClassifyGroceryProductBulk200ResponseInner>> classifyGroceryProductBulkWithHttpInfo(Set<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, String locale) throws ApiException {
        okhttp3.Call localVarCall = classifyGroceryProductBulkValidateBeforeCall(classifyGroceryProductBulkRequestInner, locale, null);
        Type localVarReturnType = new TypeToken<Set<ClassifyGroceryProductBulk200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Classify Grocery Product Bulk (asynchronously)
     * Provide a set of product jsons, get back classified products.
     * @param classifyGroceryProductBulkRequestInner  (required)
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk">Classify Grocery Product Bulk Documentation</a>
     */
    public okhttp3.Call classifyGroceryProductBulkAsync(Set<ClassifyGroceryProductBulkRequestInner> classifyGroceryProductBulkRequestInner, String locale, final ApiCallback<Set<ClassifyGroceryProductBulk200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = classifyGroceryProductBulkValidateBeforeCall(classifyGroceryProductBulkRequestInner, locale, _callback);
        Type localVarReturnType = new TypeToken<Set<ClassifyGroceryProductBulk200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getComparableProducts
     * @param upc The UPC of the product for which you want to find comparable products. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Comparable-Products">Get Comparable Products Documentation</a>
     */
    public okhttp3.Call getComparableProductsCall(BigDecimal upc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/upc/{upc}/comparable"
            .replaceAll("\\{" + "upc" + "\\}", localVarApiClient.escapeString(upc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComparableProductsValidateBeforeCall(BigDecimal upc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'upc' is set
        if (upc == null) {
            throw new ApiException("Missing the required parameter 'upc' when calling getComparableProducts(Async)");
        }
        

        okhttp3.Call localVarCall = getComparableProductsCall(upc, _callback);
        return localVarCall;

    }

    /**
     * Get Comparable Products
     * Find comparable products to the given one.
     * @param upc The UPC of the product for which you want to find comparable products. (required)
     * @return GetComparableProducts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Comparable-Products">Get Comparable Products Documentation</a>
     */
    public GetComparableProducts200Response getComparableProducts(BigDecimal upc) throws ApiException {
        ApiResponse<GetComparableProducts200Response> localVarResp = getComparableProductsWithHttpInfo(upc);
        return localVarResp.getData();
    }

    /**
     * Get Comparable Products
     * Find comparable products to the given one.
     * @param upc The UPC of the product for which you want to find comparable products. (required)
     * @return ApiResponse&lt;GetComparableProducts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Comparable-Products">Get Comparable Products Documentation</a>
     */
    public ApiResponse<GetComparableProducts200Response> getComparableProductsWithHttpInfo(BigDecimal upc) throws ApiException {
        okhttp3.Call localVarCall = getComparableProductsValidateBeforeCall(upc, null);
        Type localVarReturnType = new TypeToken<GetComparableProducts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Comparable Products (asynchronously)
     * Find comparable products to the given one.
     * @param upc The UPC of the product for which you want to find comparable products. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Comparable-Products">Get Comparable Products Documentation</a>
     */
    public okhttp3.Call getComparableProductsAsync(BigDecimal upc, final ApiCallback<GetComparableProducts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComparableProductsValidateBeforeCall(upc, _callback);
        Type localVarReturnType = new TypeToken<GetComparableProducts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProductInformation
     * @param id The item&#39;s id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Product-Information">Get Product Information Documentation</a>
     */
    public okhttp3.Call getProductInformationCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductInformationValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProductInformation(Async)");
        }
        

        okhttp3.Call localVarCall = getProductInformationCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Product Information
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @param id The item&#39;s id. (required)
     * @return GetProductInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Product-Information">Get Product Information Documentation</a>
     */
    public GetProductInformation200Response getProductInformation(Integer id) throws ApiException {
        ApiResponse<GetProductInformation200Response> localVarResp = getProductInformationWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Product Information
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @param id The item&#39;s id. (required)
     * @return ApiResponse&lt;GetProductInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Product-Information">Get Product Information Documentation</a>
     */
    public ApiResponse<GetProductInformation200Response> getProductInformationWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getProductInformationValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GetProductInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Product Information (asynchronously)
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @param id The item&#39;s id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Get-Product-Information">Get Product Information Documentation</a>
     */
    public okhttp3.Call getProductInformationAsync(Integer id, final ApiCallback<GetProductInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductInformationValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GetProductInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productNutritionByIDImage
     * @param id The id of the product. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Image">Product Nutrition by ID Image Documentation</a>
     */
    public okhttp3.Call productNutritionByIDImageCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/{id}/nutritionWidget.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productNutritionByIDImageValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productNutritionByIDImage(Async)");
        }
        

        okhttp3.Call localVarCall = productNutritionByIDImageCall(id, _callback);
        return localVarCall;

    }

    /**
     * Product Nutrition by ID Image
     * Visualize a product&#39;s nutritional information as an image.
     * @param id The id of the product. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Image">Product Nutrition by ID Image Documentation</a>
     */
    public Object productNutritionByIDImage(BigDecimal id) throws ApiException {
        ApiResponse<Object> localVarResp = productNutritionByIDImageWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Product Nutrition by ID Image
     * Visualize a product&#39;s nutritional information as an image.
     * @param id The id of the product. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Image">Product Nutrition by ID Image Documentation</a>
     */
    public ApiResponse<Object> productNutritionByIDImageWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = productNutritionByIDImageValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Product Nutrition by ID Image (asynchronously)
     * Visualize a product&#39;s nutritional information as an image.
     * @param id The id of the product. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Image">Product Nutrition by ID Image Documentation</a>
     */
    public okhttp3.Call productNutritionByIDImageAsync(BigDecimal id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = productNutritionByIDImageValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productNutritionLabelImage
     * @param id The product id. (required)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Image">Product Nutrition Label Image Documentation</a>
     */
    public okhttp3.Call productNutritionLabelImageCall(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/{id}/nutritionLabel.png"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showOptionalNutrients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showOptionalNutrients", showOptionalNutrients));
        }

        if (showZeroValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showZeroValues", showZeroValues));
        }

        if (showIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showIngredients", showIngredients));
        }

        final String[] localVarAccepts = {
            "image/png"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productNutritionLabelImageValidateBeforeCall(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productNutritionLabelImage(Async)");
        }
        

        okhttp3.Call localVarCall = productNutritionLabelImageCall(id, showOptionalNutrients, showZeroValues, showIngredients, _callback);
        return localVarCall;

    }

    /**
     * Product Nutrition Label Image
     * Get a product&#39;s nutrition label as an image.
     * @param id The product id. (required)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Image">Product Nutrition Label Image Documentation</a>
     */
    public Object productNutritionLabelImage(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
        ApiResponse<Object> localVarResp = productNutritionLabelImageWithHttpInfo(id, showOptionalNutrients, showZeroValues, showIngredients);
        return localVarResp.getData();
    }

    /**
     * Product Nutrition Label Image
     * Get a product&#39;s nutrition label as an image.
     * @param id The product id. (required)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Image">Product Nutrition Label Image Documentation</a>
     */
    public ApiResponse<Object> productNutritionLabelImageWithHttpInfo(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
        okhttp3.Call localVarCall = productNutritionLabelImageValidateBeforeCall(id, showOptionalNutrients, showZeroValues, showIngredients, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Product Nutrition Label Image (asynchronously)
     * Get a product&#39;s nutrition label as an image.
     * @param id The product id. (required)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Image">Product Nutrition Label Image Documentation</a>
     */
    public okhttp3.Call productNutritionLabelImageAsync(BigDecimal id, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = productNutritionLabelImageValidateBeforeCall(id, showOptionalNutrients, showZeroValues, showIngredients, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productNutritionLabelWidget
     * @param id The product id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Widget">Product Nutrition Label Widget Documentation</a>
     */
    public okhttp3.Call productNutritionLabelWidgetCall(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/{id}/nutritionLabel"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        if (showOptionalNutrients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showOptionalNutrients", showOptionalNutrients));
        }

        if (showZeroValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showZeroValues", showZeroValues));
        }

        if (showIngredients != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showIngredients", showIngredients));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productNutritionLabelWidgetValidateBeforeCall(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productNutritionLabelWidget(Async)");
        }
        

        okhttp3.Call localVarCall = productNutritionLabelWidgetCall(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, _callback);
        return localVarCall;

    }

    /**
     * Product Nutrition Label Widget
     * Get a product&#39;s nutrition label as an HTML widget.
     * @param id The product id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Widget">Product Nutrition Label Widget Documentation</a>
     */
    public String productNutritionLabelWidget(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
        ApiResponse<String> localVarResp = productNutritionLabelWidgetWithHttpInfo(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients);
        return localVarResp.getData();
    }

    /**
     * Product Nutrition Label Widget
     * Get a product&#39;s nutrition label as an HTML widget.
     * @param id The product id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Widget">Product Nutrition Label Widget Documentation</a>
     */
    public ApiResponse<String> productNutritionLabelWidgetWithHttpInfo(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients) throws ApiException {
        okhttp3.Call localVarCall = productNutritionLabelWidgetValidateBeforeCall(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Product Nutrition Label Widget (asynchronously)
     * Get a product&#39;s nutrition label as an HTML widget.
     * @param id The product id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Widget">Product Nutrition Label Widget Documentation</a>
     */
    public okhttp3.Call productNutritionLabelWidgetAsync(BigDecimal id, Boolean defaultCss, Boolean showOptionalNutrients, Boolean showZeroValues, Boolean showIngredients, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = productNutritionLabelWidgetValidateBeforeCall(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGroceryProducts
     * @param query The (natural language) search query. (optional)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param addProductInformation If set to true, you get more information about the products returned. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products">Search Grocery Products Documentation</a>
     */
    public okhttp3.Call searchGroceryProductsCall(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, Boolean addProductInformation, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (minCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCalories", minCalories));
        }

        if (maxCalories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCalories", maxCalories));
        }

        if (minCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCarbs", minCarbs));
        }

        if (maxCarbs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCarbs", maxCarbs));
        }

        if (minProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minProtein", minProtein));
        }

        if (maxProtein != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxProtein", maxProtein));
        }

        if (minFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFat", minFat));
        }

        if (maxFat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFat", maxFat));
        }

        if (addProductInformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addProductInformation", addProductInformation));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGroceryProductsValidateBeforeCall(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, Boolean addProductInformation, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchGroceryProductsCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number, _callback);
        return localVarCall;

    }

    /**
     * Search Grocery Products
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @param query The (natural language) search query. (optional)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param addProductInformation If set to true, you get more information about the products returned. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return SearchGroceryProducts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products">Search Grocery Products Documentation</a>
     */
    public SearchGroceryProducts200Response searchGroceryProducts(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, Boolean addProductInformation, Integer offset, Integer number) throws ApiException {
        ApiResponse<SearchGroceryProducts200Response> localVarResp = searchGroceryProductsWithHttpInfo(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Grocery Products
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @param query The (natural language) search query. (optional)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param addProductInformation If set to true, you get more information about the products returned. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse&lt;SearchGroceryProducts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products">Search Grocery Products Documentation</a>
     */
    public ApiResponse<SearchGroceryProducts200Response> searchGroceryProductsWithHttpInfo(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, Boolean addProductInformation, Integer offset, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchGroceryProductsValidateBeforeCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number, null);
        Type localVarReturnType = new TypeToken<SearchGroceryProducts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Grocery Products (asynchronously)
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @param query The (natural language) search query. (optional)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param addProductInformation If set to true, you get more information about the products returned. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products">Search Grocery Products Documentation</a>
     */
    public okhttp3.Call searchGroceryProductsAsync(String query, BigDecimal minCalories, BigDecimal maxCalories, BigDecimal minCarbs, BigDecimal maxCarbs, BigDecimal minProtein, BigDecimal maxProtein, BigDecimal minFat, BigDecimal maxFat, Boolean addProductInformation, Integer offset, Integer number, final ApiCallback<SearchGroceryProducts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGroceryProductsValidateBeforeCall(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number, _callback);
        Type localVarReturnType = new TypeToken<SearchGroceryProducts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGroceryProductsByUPC
     * @param upc The product&#39;s UPC. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC">Search Grocery Products by UPC Documentation</a>
     */
    public okhttp3.Call searchGroceryProductsByUPCCall(BigDecimal upc, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/upc/{upc}"
            .replaceAll("\\{" + "upc" + "\\}", localVarApiClient.escapeString(upc.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGroceryProductsByUPCValidateBeforeCall(BigDecimal upc, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'upc' is set
        if (upc == null) {
            throw new ApiException("Missing the required parameter 'upc' when calling searchGroceryProductsByUPC(Async)");
        }
        

        okhttp3.Call localVarCall = searchGroceryProductsByUPCCall(upc, _callback);
        return localVarCall;

    }

    /**
     * Search Grocery Products by UPC
     * Get information about a packaged food using its UPC.
     * @param upc The product&#39;s UPC. (required)
     * @return SearchGroceryProductsByUPC200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC">Search Grocery Products by UPC Documentation</a>
     */
    public SearchGroceryProductsByUPC200Response searchGroceryProductsByUPC(BigDecimal upc) throws ApiException {
        ApiResponse<SearchGroceryProductsByUPC200Response> localVarResp = searchGroceryProductsByUPCWithHttpInfo(upc);
        return localVarResp.getData();
    }

    /**
     * Search Grocery Products by UPC
     * Get information about a packaged food using its UPC.
     * @param upc The product&#39;s UPC. (required)
     * @return ApiResponse&lt;SearchGroceryProductsByUPC200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC">Search Grocery Products by UPC Documentation</a>
     */
    public ApiResponse<SearchGroceryProductsByUPC200Response> searchGroceryProductsByUPCWithHttpInfo(BigDecimal upc) throws ApiException {
        okhttp3.Call localVarCall = searchGroceryProductsByUPCValidateBeforeCall(upc, null);
        Type localVarReturnType = new TypeToken<SearchGroceryProductsByUPC200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Grocery Products by UPC (asynchronously)
     * Get information about a packaged food using its UPC.
     * @param upc The product&#39;s UPC. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC">Search Grocery Products by UPC Documentation</a>
     */
    public okhttp3.Call searchGroceryProductsByUPCAsync(BigDecimal upc, final ApiCallback<SearchGroceryProductsByUPC200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGroceryProductsByUPCValidateBeforeCall(upc, _callback);
        Type localVarReturnType = new TypeToken<SearchGroceryProductsByUPC200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualizeProductNutritionByID
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Widget">Product Nutrition by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeProductNutritionByIDCall(Integer id, Boolean defaultCss, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/food/products/{id}/nutritionWidget"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (defaultCss != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("defaultCss", defaultCss));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKeyScheme" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualizeProductNutritionByIDValidateBeforeCall(Integer id, Boolean defaultCss, String accept, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling visualizeProductNutritionByID(Async)");
        }
        

        okhttp3.Call localVarCall = visualizeProductNutritionByIDCall(id, defaultCss, accept, _callback);
        return localVarCall;

    }

    /**
     * Product Nutrition by ID Widget
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Widget">Product Nutrition by ID Widget Documentation</a>
     */
    public String visualizeProductNutritionByID(Integer id, Boolean defaultCss, String accept) throws ApiException {
        ApiResponse<String> localVarResp = visualizeProductNutritionByIDWithHttpInfo(id, defaultCss, accept);
        return localVarResp.getData();
    }

    /**
     * Product Nutrition by ID Widget
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Widget">Product Nutrition by ID Widget Documentation</a>
     */
    public ApiResponse<String> visualizeProductNutritionByIDWithHttpInfo(Integer id, Boolean defaultCss, String accept) throws ApiException {
        okhttp3.Call localVarCall = visualizeProductNutritionByIDValidateBeforeCall(id, defaultCss, accept, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Product Nutrition by ID Widget (asynchronously)
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id. (required)
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param accept Accept header. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Widget">Product Nutrition by ID Widget Documentation</a>
     */
    public okhttp3.Call visualizeProductNutritionByIDAsync(Integer id, Boolean defaultCss, String accept, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualizeProductNutritionByIDValidateBeforeCall(id, defaultCss, accept, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
